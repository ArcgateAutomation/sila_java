<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="24" total="227" passed="177" failed="26" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-11-13T19:25:19 IST" name="Silamoney Java SDK " finished-at="2020-11-13T19:35:37 IST" duration-ms="617846">
    <groups>
    </groups>
    <test started-at="2020-11-13T19:25:19 IST" name="API" finished-at="2020-11-13T19:35:37 IST" duration-ms="617846">
      <class name="sila_test_cases.Register_update_registration_data">
        <test-method is-config="true" signature="StartClass()[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:38 IST" name="StartClass" finished-at="2020-11-13T19:34:38 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StartClass -->
        <test-method signature="test_001_registration_update_email_with_empty_user_handle()[pri:1, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:38 IST" name="test_001_registration_update_email_with_empty_user_handle" finished-at="2020-11-13T19:34:39 IST" duration-ms="1345" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_001_registration_update_email_with_empty_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:39 IST" name="getResult" finished-at="2020-11-13T19:34:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_001_registration_update_email_with_empty_user_handle status=SUCCESS method=Register_update_registration_data.test_001_registration_update_email_with_empty_user_handle()[pri:1, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_002_registration_update_empty_email_field()[pri:2, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:39 IST" name="test_002_registration_update_empty_email_field" finished-at="2020-11-13T19:34:40 IST" duration-ms="877" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_002_registration_update_empty_email_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:40 IST" name="getResult" finished-at="2020-11-13T19:34:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_002_registration_update_empty_email_field status=SUCCESS method=Register_update_registration_data.test_002_registration_update_empty_email_field()[pri:2, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_002_registration_update_invalid_email_field()[pri:3, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:40 IST" name="test_002_registration_update_invalid_email_field" finished-at="2020-11-13T19:34:40 IST" duration-ms="631" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_002_registration_update_invalid_email_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:40 IST" name="getResult" finished-at="2020-11-13T19:34:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_002_registration_update_invalid_email_field status=SUCCESS method=Register_update_registration_data.test_002_registration_update_invalid_email_field()[pri:3, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_003_registration_update_email_with_invalid_private_key()[pri:4, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:40 IST" name="test_003_registration_update_email_with_invalid_private_key" finished-at="2020-11-13T19:34:41 IST" duration-ms="592" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_003_registration_update_email_with_invalid_private_key -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:41 IST" name="getResult" finished-at="2020-11-13T19:34:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_003_registration_update_email_with_invalid_private_key status=SUCCESS method=Register_update_registration_data.test_003_registration_update_email_with_invalid_private_key()[pri:4, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_004_registration_update_email_with_not_registered_handle()[pri:5, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:41 IST" name="test_004_registration_update_email_with_not_registered_handle" finished-at="2020-11-13T19:34:41 IST" duration-ms="456" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_004_registration_update_email_with_not_registered_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:41 IST" name="getResult" finished-at="2020-11-13T19:34:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_004_registration_update_email_with_not_registered_handle status=SUCCESS method=Register_update_registration_data.test_004_registration_update_email_with_not_registered_handle()[pri:5, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_006_registration_update_email_with_more_than_max_email_length()[pri:6, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:41 IST" name="test_006_registration_update_email_with_more_than_max_email_length" finished-at="2020-11-13T19:34:42 IST" duration-ms="590" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_update_registration_data.test_006_registration_update_email_with_more_than_max_email_length(Register_update_registration_data.java:132)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_006_registration_update_email_with_more_than_max_email_length -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:42 IST" name="getResult" finished-at="2020-11-13T19:34:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_006_registration_update_email_with_more_than_max_email_length status=FAILURE method=Register_update_registration_data.test_006_registration_update_email_with_more_than_max_email_length()[pri:6, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_007_registration_update_email_with_invalid_uuid()[pri:7, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:42 IST" name="test_007_registration_update_email_with_invalid_uuid" finished-at="2020-11-13T19:34:43 IST" duration-ms="577" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_007_registration_update_email_with_invalid_uuid -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:43 IST" name="getResult" finished-at="2020-11-13T19:34:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_007_registration_update_email_with_invalid_uuid status=SUCCESS method=Register_update_registration_data.test_007_registration_update_email_with_invalid_uuid()[pri:7, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_008_registration_update_email_successfully_with_254_characters_email()[pri:8, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:43 IST" name="test_008_registration_update_email_successfully_with_254_characters_email" finished-at="2020-11-13T19:34:43 IST" duration-ms="586" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_008_registration_update_email_successfully_with_254_characters_email -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:43 IST" name="getResult" finished-at="2020-11-13T19:34:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_008_registration_update_email_successfully_with_254_characters_email status=SUCCESS method=Register_update_registration_data.test_008_registration_update_email_successfully_with_254_characters_email()[pri:8, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_009_registration_update_phone_num_with_empty_phone_field()[pri:9, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:43 IST" name="test_009_registration_update_phone_num_with_empty_phone_field" finished-at="2020-11-13T19:34:44 IST" duration-ms="675" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_009_registration_update_phone_num_with_empty_phone_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:44 IST" name="getResult" finished-at="2020-11-13T19:34:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_009_registration_update_phone_num_with_empty_phone_field status=SUCCESS method=Register_update_registration_data.test_009_registration_update_phone_num_with_empty_phone_field()[pri:9, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_010_registration_update_invalid_phone_number()[pri:10, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:44 IST" name="test_010_registration_update_invalid_phone_number" finished-at="2020-11-13T19:34:45 IST" duration-ms="633" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_010_registration_update_invalid_phone_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:45 IST" name="getResult" finished-at="2020-11-13T19:34:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_010_registration_update_invalid_phone_number status=SUCCESS method=Register_update_registration_data.test_010_registration_update_invalid_phone_number()[pri:10, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_011_registration_update_phone_number_with_less_than_10_digits()[pri:11, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:45 IST" name="test_011_registration_update_phone_number_with_less_than_10_digits" finished-at="2020-11-13T19:34:45 IST" duration-ms="577" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_011_registration_update_phone_number_with_less_than_10_digits -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:45 IST" name="getResult" finished-at="2020-11-13T19:34:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_011_registration_update_phone_number_with_less_than_10_digits status=SUCCESS method=Register_update_registration_data.test_011_registration_update_phone_number_with_less_than_10_digits()[pri:11, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_012_registration_update_phone_number_with_more_than_10_digits()[pri:12, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:45 IST" name="test_012_registration_update_phone_number_with_more_than_10_digits" finished-at="2020-11-13T19:34:46 IST" duration-ms="689" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_012_registration_update_phone_number_with_more_than_10_digits -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:46 IST" name="getResult" finished-at="2020-11-13T19:34:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_012_registration_update_phone_number_with_more_than_10_digits status=SUCCESS method=Register_update_registration_data.test_012_registration_update_phone_number_with_more_than_10_digits()[pri:12, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_013_registration_update_phone_number_with_invalid_uuid()[pri:13, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:46 IST" name="test_013_registration_update_phone_number_with_invalid_uuid" finished-at="2020-11-13T19:34:46 IST" duration-ms="632" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_013_registration_update_phone_number_with_invalid_uuid -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:47 IST" name="getResult" finished-at="2020-11-13T19:34:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_013_registration_update_phone_number_with_invalid_uuid status=SUCCESS method=Register_update_registration_data.test_013_registration_update_phone_number_with_invalid_uuid()[pri:13, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_014_registration_update_10_digits_phone_number_successfully()[pri:14, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:47 IST" name="test_014_registration_update_10_digits_phone_number_successfully" finished-at="2020-11-13T19:34:47 IST" duration-ms="634" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_014_registration_update_10_digits_phone_number_successfully -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:47 IST" name="getResult" finished-at="2020-11-13T19:34:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_014_registration_update_10_digits_phone_number_successfully status=SUCCESS method=Register_update_registration_data.test_014_registration_update_10_digits_phone_number_successfully()[pri:14, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_015_registration_update_identity_with_empty_identity_alias()[pri:15, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:47 IST" name="test_015_registration_update_identity_with_empty_identity_alias" finished-at="2020-11-13T19:34:48 IST" duration-ms="651" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_015_registration_update_identity_with_empty_identity_alias -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:48 IST" name="getResult" finished-at="2020-11-13T19:34:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_015_registration_update_identity_with_empty_identity_alias status=SUCCESS method=Register_update_registration_data.test_015_registration_update_identity_with_empty_identity_alias()[pri:15, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_016_registration_update_identity_with_empty_identity_value()[pri:16, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:48 IST" name="test_016_registration_update_identity_with_empty_identity_value" finished-at="2020-11-13T19:34:48 IST" duration-ms="613" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_016_registration_update_identity_with_empty_identity_value -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:48 IST" name="getResult" finished-at="2020-11-13T19:34:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_016_registration_update_identity_with_empty_identity_value status=SUCCESS method=Register_update_registration_data.test_016_registration_update_identity_with_empty_identity_value()[pri:16, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_017_registration_update_identity_with_invalid_identity_alias()[pri:17, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:48 IST" name="test_017_registration_update_identity_with_invalid_identity_alias" finished-at="2020-11-13T19:34:50 IST" duration-ms="1341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_017_registration_update_identity_with_invalid_identity_alias -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:50 IST" name="getResult" finished-at="2020-11-13T19:34:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_017_registration_update_identity_with_invalid_identity_alias status=SUCCESS method=Register_update_registration_data.test_017_registration_update_identity_with_invalid_identity_alias()[pri:17, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_018_registration_update_identity_alias_value_in_lowercase()[pri:18, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:50 IST" name="test_018_registration_update_identity_alias_value_in_lowercase" finished-at="2020-11-13T19:34:51 IST" duration-ms="1384" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_018_registration_update_identity_alias_value_in_lowercase -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:51 IST" name="getResult" finished-at="2020-11-13T19:34:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_018_registration_update_identity_alias_value_in_lowercase status=SUCCESS method=Register_update_registration_data.test_018_registration_update_identity_alias_value_in_lowercase()[pri:18, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_019_registration_update_identity_alias_value_as_EIN_to_individual_user()[pri:19, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:51 IST" name="test_019_registration_update_identity_alias_value_as_EIN_to_individual_user" finished-at="2020-11-13T19:34:53 IST" duration-ms="1370" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_019_registration_update_identity_alias_value_as_EIN_to_individual_user -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:53 IST" name="getResult" finished-at="2020-11-13T19:34:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_019_registration_update_identity_alias_value_as_EIN_to_individual_user status=SUCCESS method=Register_update_registration_data.test_019_registration_update_identity_alias_value_as_EIN_to_individual_user()[pri:19, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_020_registration_update_individual_user_identity_successfully()[pri:20, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:53 IST" name="test_020_registration_update_individual_user_identity_successfully" finished-at="2020-11-13T19:34:54 IST" duration-ms="1957" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_020_registration_update_individual_user_identity_successfully -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:55 IST" name="getResult" finished-at="2020-11-13T19:34:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_020_registration_update_individual_user_identity_successfully status=SUCCESS method=Register_update_registration_data.test_020_registration_update_individual_user_identity_successfully()[pri:20, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_021_registration_update_address_with_empty_address_alias()[pri:21, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:55 IST" name="test_021_registration_update_address_with_empty_address_alias" finished-at="2020-11-13T19:34:56 IST" duration-ms="1305" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_update_registration_data.test_021_registration_update_address_with_empty_address_alias(Register_update_registration_data.java:438)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_021_registration_update_address_with_empty_address_alias -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:56 IST" name="getResult" finished-at="2020-11-13T19:34:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_021_registration_update_address_with_empty_address_alias status=FAILURE method=Register_update_registration_data.test_021_registration_update_address_with_empty_address_alias()[pri:21, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_022_registration_update_address_alias()[pri:22, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:56 IST" name="test_022_registration_update_address_alias" finished-at="2020-11-13T19:34:57 IST" duration-ms="1560" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_022_registration_update_address_alias -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:57 IST" name="getResult" finished-at="2020-11-13T19:34:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_022_registration_update_address_alias status=SUCCESS method=Register_update_registration_data.test_022_registration_update_address_alias()[pri:22, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_023_registration_update_address_with_empty_street_address_1()[pri:23, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:57 IST" name="test_023_registration_update_address_with_empty_street_address_1" finished-at="2020-11-13T19:34:59 IST" duration-ms="1302" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_update_registration_data.test_023_registration_update_address_with_empty_street_address_1(Register_update_registration_data.java:489)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_023_registration_update_address_with_empty_street_address_1 -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:59 IST" name="getResult" finished-at="2020-11-13T19:34:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_023_registration_update_address_with_empty_street_address_1 status=FAILURE method=Register_update_registration_data.test_023_registration_update_address_with_empty_street_address_1()[pri:23, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_024_registration_update_street_address_1_address_with_less_than_3_characters()[pri:24, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:34:59 IST" name="test_024_registration_update_street_address_1_address_with_less_than_3_characters" finished-at="2020-11-13T19:35:00 IST" duration-ms="1562" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_024_registration_update_street_address_1_address_with_less_than_3_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:00 IST" name="getResult" finished-at="2020-11-13T19:35:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_024_registration_update_street_address_1_address_with_less_than_3_characters status=SUCCESS method=Register_update_registration_data.test_024_registration_update_street_address_1_address_with_less_than_3_characters()[pri:24, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_025_registration_update_street_address_1_address_with_more_than_max_character()[pri:25, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:00 IST" name="test_025_registration_update_street_address_1_address_with_more_than_max_character" finished-at="2020-11-13T19:35:02 IST" duration-ms="1315" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_025_registration_update_street_address_1_address_with_more_than_max_character -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:02 IST" name="getResult" finished-at="2020-11-13T19:35:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_025_registration_update_street_address_1_address_with_more_than_max_character status=SUCCESS method=Register_update_registration_data.test_025_registration_update_street_address_1_address_with_more_than_max_character()[pri:25, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_026_registration_update_street_address_1_address_with_40_characters()[pri:26, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:02 IST" name="test_026_registration_update_street_address_1_address_with_40_characters" finished-at="2020-11-13T19:35:03 IST" duration-ms="1313" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_026_registration_update_street_address_1_address_with_40_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:03 IST" name="getResult" finished-at="2020-11-13T19:35:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_026_registration_update_street_address_1_address_with_40_characters status=SUCCESS method=Register_update_registration_data.test_026_registration_update_street_address_1_address_with_40_characters()[pri:26, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_027_registration_update_street_address_1_address_with_3_characters()[pri:27, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:03 IST" name="test_027_registration_update_street_address_1_address_with_3_characters" finished-at="2020-11-13T19:35:04 IST" duration-ms="1511" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_027_registration_update_street_address_1_address_with_3_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:04 IST" name="getResult" finished-at="2020-11-13T19:35:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_027_registration_update_street_address_1_address_with_3_characters status=SUCCESS method=Register_update_registration_data.test_027_registration_update_street_address_1_address_with_3_characters()[pri:27, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_028_registration_update_address_with_empty_street_address_2()[pri:28, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:04 IST" name="test_028_registration_update_address_with_empty_street_address_2" finished-at="2020-11-13T19:35:06 IST" duration-ms="1341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_028_registration_update_address_with_empty_street_address_2 -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:06 IST" name="getResult" finished-at="2020-11-13T19:35:06 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_028_registration_update_address_with_empty_street_address_2 status=SUCCESS method=Register_update_registration_data.test_028_registration_update_address_with_empty_street_address_2()[pri:28, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_029_registration_update_street_address_2_address_with_less_than_3_characters()[pri:29, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:06 IST" name="test_029_registration_update_street_address_2_address_with_less_than_3_characters" finished-at="2020-11-13T19:35:07 IST" duration-ms="1386" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_029_registration_update_street_address_2_address_with_less_than_3_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:07 IST" name="getResult" finished-at="2020-11-13T19:35:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_029_registration_update_street_address_2_address_with_less_than_3_characters status=SUCCESS method=Register_update_registration_data.test_029_registration_update_street_address_2_address_with_less_than_3_characters()[pri:29, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_030_registration_update_street_address_2_address_with_more_than_max_character()[pri:30, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:07 IST" name="test_030_registration_update_street_address_2_address_with_more_than_max_character" finished-at="2020-11-13T19:35:08 IST" duration-ms="1321" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_030_registration_update_street_address_2_address_with_more_than_max_character -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:08 IST" name="getResult" finished-at="2020-11-13T19:35:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_030_registration_update_street_address_2_address_with_more_than_max_character status=SUCCESS method=Register_update_registration_data.test_030_registration_update_street_address_2_address_with_more_than_max_character()[pri:30, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_031_registration_update_street_address_2_address_with_40_characters()[pri:31, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:08 IST" name="test_031_registration_update_street_address_2_address_with_40_characters" finished-at="2020-11-13T19:35:10 IST" duration-ms="1363" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_031_registration_update_street_address_2_address_with_40_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:10 IST" name="getResult" finished-at="2020-11-13T19:35:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_031_registration_update_street_address_2_address_with_40_characters status=SUCCESS method=Register_update_registration_data.test_031_registration_update_street_address_2_address_with_40_characters()[pri:31, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_032_registration_update_street_address_2_address_with_3_characters()[pri:32, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:10 IST" name="test_032_registration_update_street_address_2_address_with_3_characters" finished-at="2020-11-13T19:35:11 IST" duration-ms="1395" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_032_registration_update_street_address_2_address_with_3_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:11 IST" name="getResult" finished-at="2020-11-13T19:35:11 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_032_registration_update_street_address_2_address_with_3_characters status=SUCCESS method=Register_update_registration_data.test_032_registration_update_street_address_2_address_with_3_characters()[pri:32, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_033_registration_update_address_with_empty_city()[pri:33, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:11 IST" name="test_033_registration_update_address_with_empty_city" finished-at="2020-11-13T19:35:13 IST" duration-ms="1473" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_update_registration_data.test_033_registration_update_address_with_empty_city(Register_update_registration_data.java:764)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_033_registration_update_address_with_empty_city -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:13 IST" name="getResult" finished-at="2020-11-13T19:35:13 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_033_registration_update_address_with_empty_city status=FAILURE method=Register_update_registration_data.test_033_registration_update_address_with_empty_city()[pri:33, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_034_registration_update_address_with_less_than_2_characters_city_name()[pri:34, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:13 IST" name="test_034_registration_update_address_with_less_than_2_characters_city_name" finished-at="2020-11-13T19:35:14 IST" duration-ms="1289" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_034_registration_update_address_with_less_than_2_characters_city_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:14 IST" name="getResult" finished-at="2020-11-13T19:35:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_034_registration_update_address_with_less_than_2_characters_city_name status=SUCCESS method=Register_update_registration_data.test_034_registration_update_address_with_less_than_2_characters_city_name()[pri:34, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_035_registration_update_address_with_more_than_40_characters_city_name()[pri:35, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:14 IST" name="test_035_registration_update_address_with_more_than_40_characters_city_name" finished-at="2020-11-13T19:35:16 IST" duration-ms="1492" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_035_registration_update_address_with_more_than_40_characters_city_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:16 IST" name="getResult" finished-at="2020-11-13T19:35:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_035_registration_update_address_with_more_than_40_characters_city_name status=SUCCESS method=Register_update_registration_data.test_035_registration_update_address_with_more_than_40_characters_city_name()[pri:35, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_36_registration_update_address_with_40_characters_city_name()[pri:36, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:16 IST" name="test_36_registration_update_address_with_40_characters_city_name" finished-at="2020-11-13T19:35:17 IST" duration-ms="1386" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_36_registration_update_address_with_40_characters_city_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:17 IST" name="getResult" finished-at="2020-11-13T19:35:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_36_registration_update_address_with_40_characters_city_name status=SUCCESS method=Register_update_registration_data.test_36_registration_update_address_with_40_characters_city_name()[pri:36, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_037_registration_update_address_with_empty_state()[pri:37, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:17 IST" name="test_037_registration_update_address_with_empty_state" finished-at="2020-11-13T19:35:18 IST" duration-ms="1463" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_update_registration_data.test_037_registration_update_address_with_empty_state(Register_update_registration_data.java:875)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_037_registration_update_address_with_empty_state -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:18 IST" name="getResult" finished-at="2020-11-13T19:35:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_037_registration_update_address_with_empty_state status=FAILURE method=Register_update_registration_data.test_037_registration_update_address_with_empty_state()[pri:37, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_038_registration_update_address_with_less_than_2_characters_state_name()[pri:38, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:18 IST" name="test_038_registration_update_address_with_less_than_2_characters_state_name" finished-at="2020-11-13T19:35:20 IST" duration-ms="1368" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_038_registration_update_address_with_less_than_2_characters_state_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:20 IST" name="getResult" finished-at="2020-11-13T19:35:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_038_registration_update_address_with_less_than_2_characters_state_name status=SUCCESS method=Register_update_registration_data.test_038_registration_update_address_with_less_than_2_characters_state_name()[pri:38, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_039_registration_update_address_with_more_than_40_characters_state_name()[pri:39, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:20 IST" name="test_039_registration_update_address_with_more_than_40_characters_state_name" finished-at="2020-11-13T19:35:21 IST" duration-ms="1594" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_039_registration_update_address_with_more_than_40_characters_state_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:21 IST" name="getResult" finished-at="2020-11-13T19:35:21 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_039_registration_update_address_with_more_than_40_characters_state_name status=SUCCESS method=Register_update_registration_data.test_039_registration_update_address_with_more_than_40_characters_state_name()[pri:39, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_040_registration_update_address_with_40_characters_state_name()[pri:40, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:21 IST" name="test_040_registration_update_address_with_40_characters_state_name" finished-at="2020-11-13T19:35:23 IST" duration-ms="1592" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_040_registration_update_address_with_40_characters_state_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:23 IST" name="getResult" finished-at="2020-11-13T19:35:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_040_registration_update_address_with_40_characters_state_name status=SUCCESS method=Register_update_registration_data.test_040_registration_update_address_with_40_characters_state_name()[pri:40, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_041_registration_update_address_successfully()[pri:41, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:23 IST" name="test_041_registration_update_address_successfully" finished-at="2020-11-13T19:35:24 IST" duration-ms="1369" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_041_registration_update_address_successfully -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:24 IST" name="getResult" finished-at="2020-11-13T19:35:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_041_registration_update_address_successfully status=SUCCESS method=Register_update_registration_data.test_041_registration_update_address_successfully()[pri:41, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_042_registration_update_address_with_another_uuid()[pri:42, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:24 IST" name="test_042_registration_update_address_with_another_uuid" finished-at="2020-11-13T19:35:26 IST" duration-ms="1313" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_042_registration_update_address_with_another_uuid -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:26 IST" name="getResult" finished-at="2020-11-13T19:35:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_042_registration_update_address_with_another_uuid status=SUCCESS method=Register_update_registration_data.test_042_registration_update_address_with_another_uuid()[pri:42, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_043_registration_update_address_with_invalid_uuid()[pri:43, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:26 IST" name="test_043_registration_update_address_with_invalid_uuid" finished-at="2020-11-13T19:35:27 IST" duration-ms="1283" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_043_registration_update_address_with_invalid_uuid -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:27 IST" name="getResult" finished-at="2020-11-13T19:35:27 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_043_registration_update_address_with_invalid_uuid status=SUCCESS method=Register_update_registration_data.test_043_registration_update_address_with_invalid_uuid()[pri:43, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_044_registration_update_empty_first_name()[pri:44, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:27 IST" name="test_044_registration_update_empty_first_name" finished-at="2020-11-13T19:35:28 IST" duration-ms="794" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_044_registration_update_empty_first_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:28 IST" name="getResult" finished-at="2020-11-13T19:35:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_044_registration_update_empty_first_name status=SUCCESS method=Register_update_registration_data.test_044_registration_update_empty_first_name()[pri:44, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_045_registration_update_empty_first_name()[pri:45, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:28 IST" name="test_045_registration_update_empty_first_name" finished-at="2020-11-13T19:35:28 IST" duration-ms="629" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_045_registration_update_empty_first_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:28 IST" name="getResult" finished-at="2020-11-13T19:35:28 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_045_registration_update_empty_first_name status=SUCCESS method=Register_update_registration_data.test_045_registration_update_empty_first_name()[pri:45, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_046_registration_update_first_name_with_min_character()[pri:46, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:28 IST" name="test_046_registration_update_first_name_with_min_character" finished-at="2020-11-13T19:35:29 IST" duration-ms="639" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_046_registration_update_first_name_with_min_character -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:29 IST" name="getResult" finished-at="2020-11-13T19:35:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_046_registration_update_first_name_with_min_character status=SUCCESS method=Register_update_registration_data.test_046_registration_update_first_name_with_min_character()[pri:46, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_047_registration_update_first_name_with_max_character()[pri:47, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:29 IST" name="test_047_registration_update_first_name_with_max_character" finished-at="2020-11-13T19:35:30 IST" duration-ms="622" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_047_registration_update_first_name_with_max_character -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:30 IST" name="getResult" finished-at="2020-11-13T19:35:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_047_registration_update_first_name_with_max_character status=SUCCESS method=Register_update_registration_data.test_047_registration_update_first_name_with_max_character()[pri:47, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_048_registration_update_first_name_with_more_than_40_character()[pri:48, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:30 IST" name="test_048_registration_update_first_name_with_more_than_40_character" finished-at="2020-11-13T19:35:30 IST" duration-ms="656" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_048_registration_update_first_name_with_more_than_40_character -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:30 IST" name="getResult" finished-at="2020-11-13T19:35:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_048_registration_update_first_name_with_more_than_40_character status=SUCCESS method=Register_update_registration_data.test_048_registration_update_first_name_with_more_than_40_character()[pri:48, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_049_registration_update_empty_last_name()[pri:49, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:30 IST" name="test_049_registration_update_empty_last_name" finished-at="2020-11-13T19:35:31 IST" duration-ms="666" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_049_registration_update_empty_last_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:31 IST" name="getResult" finished-at="2020-11-13T19:35:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_049_registration_update_empty_last_name status=SUCCESS method=Register_update_registration_data.test_049_registration_update_empty_last_name()[pri:49, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_050_registration_update_last_name_with_min_character()[pri:50, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:31 IST" name="test_050_registration_update_last_name_with_min_character" finished-at="2020-11-13T19:35:32 IST" duration-ms="652" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_050_registration_update_last_name_with_min_character -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:32 IST" name="getResult" finished-at="2020-11-13T19:35:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_050_registration_update_last_name_with_min_character status=SUCCESS method=Register_update_registration_data.test_050_registration_update_last_name_with_min_character()[pri:50, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_051_registration_update_last_name_with_max_character()[pri:51, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:32 IST" name="test_051_registration_update_last_name_with_max_character" finished-at="2020-11-13T19:35:32 IST" duration-ms="664" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_051_registration_update_last_name_with_max_character -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:32 IST" name="getResult" finished-at="2020-11-13T19:35:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_051_registration_update_last_name_with_max_character status=SUCCESS method=Register_update_registration_data.test_051_registration_update_last_name_with_max_character()[pri:51, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_052_registration_update_last_name_with_more_than_40_character()[pri:52, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:32 IST" name="test_052_registration_update_last_name_with_more_than_40_character" finished-at="2020-11-13T19:35:33 IST" duration-ms="775" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_052_registration_update_last_name_with_more_than_40_character -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:33 IST" name="getResult" finished-at="2020-11-13T19:35:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_052_registration_update_last_name_with_more_than_40_character status=SUCCESS method=Register_update_registration_data.test_052_registration_update_last_name_with_more_than_40_character()[pri:52, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_053_registration_update_empty_entity_name()[pri:53, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:33 IST" name="test_053_registration_update_empty_entity_name" finished-at="2020-11-13T19:35:34 IST" duration-ms="696" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_053_registration_update_empty_entity_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:34 IST" name="getResult" finished-at="2020-11-13T19:35:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_053_registration_update_empty_entity_name status=SUCCESS method=Register_update_registration_data.test_053_registration_update_empty_entity_name()[pri:53, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_054_registration_update_entity_name_with_min_characters()[pri:54, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:34 IST" name="test_054_registration_update_entity_name_with_min_characters" finished-at="2020-11-13T19:35:35 IST" duration-ms="654" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_054_registration_update_entity_name_with_min_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:35 IST" name="getResult" finished-at="2020-11-13T19:35:35 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_054_registration_update_entity_name_with_min_characters status=SUCCESS method=Register_update_registration_data.test_054_registration_update_entity_name_with_min_characters()[pri:54, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_055_registration_update_entity_name_with_max_characters()[pri:55, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:35 IST" name="test_055_registration_update_entity_name_with_max_characters" finished-at="2020-11-13T19:35:35 IST" duration-ms="801" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_055_registration_update_entity_name_with_max_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:35 IST" name="getResult" finished-at="2020-11-13T19:35:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_055_registration_update_entity_name_with_max_characters status=SUCCESS method=Register_update_registration_data.test_055_registration_update_entity_name_with_max_characters()[pri:55, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_056_registration_update_entity_name_less_than_3_characters()[pri:56, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:35 IST" name="test_056_registration_update_entity_name_less_than_3_characters" finished-at="2020-11-13T19:35:36 IST" duration-ms="760" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_update_registration_data.test_056_registration_update_entity_name_less_than_3_characters(Register_update_registration_data.java:1315)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_056_registration_update_entity_name_less_than_3_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:36 IST" name="getResult" finished-at="2020-11-13T19:35:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_056_registration_update_entity_name_less_than_3_characters status=FAILURE method=Register_update_registration_data.test_056_registration_update_entity_name_less_than_3_characters()[pri:56, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_057_registration_update_entity_name_more_than_40_characters()[pri:57, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:36 IST" name="test_057_registration_update_entity_name_more_than_40_characters" finished-at="2020-11-13T19:35:37 IST" duration-ms="634" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_update_registration_data.test_057_registration_update_entity_name_more_than_40_characters(Register_update_registration_data.java:1330)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_057_registration_update_entity_name_more_than_40_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:37 IST" name="getResult" finished-at="2020-11-13T19:35:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_057_registration_update_entity_name_more_than_40_characters status=FAILURE method=Register_update_registration_data.test_057_registration_update_entity_name_more_than_40_characters()[pri:57, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="CloseClass()[pri:0, instance:sila_test_cases.Register_update_registration_data@7ff2b8d2]" started-at="2020-11-13T19:35:37 IST" name="CloseClass" finished-at="2020-11-13T19:35:37 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CloseClass -->
      </class> <!-- sila_test_cases.Register_update_registration_data -->
      <class name="sila_test_cases.Request_kyc">
        <test-method is-config="true" signature="StartClass()[pri:0, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:28:43 IST" name="StartClass" finished-at="2020-11-13T19:28:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StartClass -->
        <test-method signature="Test_01_Request_KYC_Without_kyc_level_entity()[pri:1, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:28:43 IST" name="Test_01_Request_KYC_Without_kyc_level_entity" finished-at="2020-11-13T19:28:51 IST" duration-ms="7670" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_01_Request_KYC_Without_kyc_level_entity -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:28:51 IST" name="getResult" finished-at="2020-11-13T19:28:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_01_Request_KYC_Without_kyc_level_entity status=SUCCESS method=Request_kyc.Test_01_Request_KYC_Without_kyc_level_entity()[pri:1, instance:sila_test_cases.Request_kyc@5e76a2bb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_02_Request_KYC_With_empty_kyc_level_field()[pri:2, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:28:51 IST" name="Test_02_Request_KYC_With_empty_kyc_level_field" finished-at="2020-11-13T19:28:54 IST" duration-ms="3539" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Request_kyc.Test_02_Request_KYC_With_empty_kyc_level_field(Request_kyc.java:50)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_02_Request_KYC_With_empty_kyc_level_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:28:54 IST" name="getResult" finished-at="2020-11-13T19:28:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_02_Request_KYC_With_empty_kyc_level_field status=FAILURE method=Request_kyc.Test_02_Request_KYC_With_empty_kyc_level_field()[pri:2, instance:sila_test_cases.Request_kyc@5e76a2bb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_03_Request_KYC_With_empty_user_handle()[pri:3, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:28:54 IST" name="Test_03_Request_KYC_With_empty_user_handle" finished-at="2020-11-13T19:28:58 IST" duration-ms="3483" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_03_Request_KYC_With_empty_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:28:58 IST" name="getResult" finished-at="2020-11-13T19:28:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_03_Request_KYC_With_empty_user_handle status=SUCCESS method=Request_kyc.Test_03_Request_KYC_With_empty_user_handle()[pri:3, instance:sila_test_cases.Request_kyc@5e76a2bb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_04_Request_KYC_With_401()[pri:4, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:28:58 IST" name="Test_04_Request_KYC_With_401" finished-at="2020-11-13T19:29:01 IST" duration-ms="3482" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_04_Request_KYC_With_401 -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:29:01 IST" name="getResult" finished-at="2020-11-13T19:29:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_04_Request_KYC_With_401 status=SUCCESS method=Request_kyc.Test_04_Request_KYC_With_401()[pri:4, instance:sila_test_cases.Request_kyc@5e76a2bb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_05_Request_KYC_With_403()[pri:5, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:29:01 IST" name="Test_05_Request_KYC_With_403" finished-at="2020-11-13T19:29:05 IST" duration-ms="3660" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_05_Request_KYC_With_403 -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:29:05 IST" name="getResult" finished-at="2020-11-13T19:29:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_05_Request_KYC_With_403 status=SUCCESS method=Request_kyc.Test_05_Request_KYC_With_403()[pri:5, instance:sila_test_cases.Request_kyc@5e76a2bb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_06_Request_KYC_With_unregistered_user_handle()[pri:6, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:29:05 IST" name="Test_06_Request_KYC_With_unregistered_user_handle" finished-at="2020-11-13T19:29:09 IST" duration-ms="4040" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_06_Request_KYC_With_unregistered_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:29:09 IST" name="getResult" finished-at="2020-11-13T19:29:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_06_Request_KYC_With_unregistered_user_handle status=SUCCESS method=Request_kyc.Test_06_Request_KYC_With_unregistered_user_handle()[pri:6, instance:sila_test_cases.Request_kyc@5e76a2bb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="CloseClass()[pri:0, instance:sila_test_cases.Request_kyc@5e76a2bb]" started-at="2020-11-13T19:29:09 IST" name="CloseClass" finished-at="2020-11-13T19:29:09 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CloseClass -->
      </class> <!-- sila_test_cases.Request_kyc -->
      <class name="sila_test_cases.Check_kyc">
        <test-method is-config="true" signature="StartClass()[pri:0, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:29:09 IST" name="StartClass" finished-at="2020-11-13T19:29:09 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StartClass -->
        <test-method signature="Test_01_Check_kyc_with_not_requested_kyc_user_handle()[pri:1, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:29:09 IST" name="Test_01_Check_kyc_with_not_requested_kyc_user_handle" finished-at="2020-11-13T19:29:14 IST" duration-ms="4987" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_01_Check_kyc_with_not_requested_kyc_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:29:14 IST" name="getResult" finished-at="2020-11-13T19:29:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_01_Check_kyc_with_not_requested_kyc_user_handle status=SUCCESS method=Check_kyc.Test_01_Check_kyc_with_not_requested_kyc_user_handle()[pri:1, instance:sila_test_cases.Check_kyc@757194dc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_02_Check_kyc_verification_pending()[pri:2, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:29:14 IST" name="Test_02_Check_kyc_verification_pending" finished-at="2020-11-13T19:29:16 IST" duration-ms="1578" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_02_Check_kyc_verification_pending -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:29:16 IST" name="getResult" finished-at="2020-11-13T19:29:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_02_Check_kyc_verification_pending status=SUCCESS method=Check_kyc.Test_02_Check_kyc_verification_pending()[pri:2, instance:sila_test_cases.Check_kyc@757194dc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_03_Check_kyc_verification_successfully_passed()[pri:3, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:29:16 IST" name="Test_03_Check_kyc_verification_successfully_passed" finished-at="2020-11-13T19:31:18 IST" duration-ms="121915" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_03_Check_kyc_verification_successfully_passed -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:31:18 IST" name="getResult" finished-at="2020-11-13T19:31:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_03_Check_kyc_verification_successfully_passed status=SUCCESS method=Check_kyc.Test_03_Check_kyc_verification_successfully_passed()[pri:3, instance:sila_test_cases.Check_kyc@757194dc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_04_Check_kyc_with_unregistered_user_handle()[pri:4, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:31:18 IST" name="Test_04_Check_kyc_with_unregistered_user_handle" finished-at="2020-11-13T19:31:18 IST" duration-ms="528" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_04_Check_kyc_with_unregistered_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:31:18 IST" name="getResult" finished-at="2020-11-13T19:31:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_04_Check_kyc_with_unregistered_user_handle status=SUCCESS method=Check_kyc.Test_04_Check_kyc_with_unregistered_user_handle()[pri:4, instance:sila_test_cases.Check_kyc@757194dc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_05_Check_kyc_with_empty_user_handle()[pri:5, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:31:18 IST" name="Test_05_Check_kyc_with_empty_user_handle" finished-at="2020-11-13T19:31:18 IST" duration-ms="383" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_05_Check_kyc_with_empty_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:31:18 IST" name="getResult" finished-at="2020-11-13T19:31:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_05_Check_kyc_with_empty_user_handle status=SUCCESS method=Check_kyc.Test_05_Check_kyc_with_empty_user_handle()[pri:5, instance:sila_test_cases.Check_kyc@757194dc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_06_Check_kyc_with_invalid_signature()[pri:6, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:31:18 IST" name="Test_06_Check_kyc_with_invalid_signature" finished-at="2020-11-13T19:31:20 IST" duration-ms="1297" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_06_Check_kyc_with_invalid_signature -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:31:20 IST" name="getResult" finished-at="2020-11-13T19:31:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_06_Check_kyc_with_invalid_signature status=SUCCESS method=Check_kyc.Test_06_Check_kyc_with_invalid_signature()[pri:6, instance:sila_test_cases.Check_kyc@757194dc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="CloseClass()[pri:0, instance:sila_test_cases.Check_kyc@757194dc]" started-at="2020-11-13T19:31:20 IST" name="CloseClass" finished-at="2020-11-13T19:31:20 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CloseClass -->
      </class> <!-- sila_test_cases.Check_kyc -->
      <class name="sila_test_cases.Register">
        <test-method is-config="true" signature="StartClass()[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:25:26 IST" name="StartClass" finished-at="2020-11-13T19:25:26 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StartClass -->
        <test-method signature="Test_01_Test_01_register_with_all_valid_data()[pri:1, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:25:26 IST" name="Test_01_Test_01_register_with_all_valid_data" finished-at="2020-11-13T19:25:47 IST" duration-ms="21546" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_01_Test_01_register_with_all_valid_data -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:25:47 IST" name="getResult" finished-at="2020-11-13T19:25:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_01_Test_01_register_with_all_valid_data status=SUCCESS method=Register.Test_01_Test_01_register_with_all_valid_data()[pri:1, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_02_register_with_already_taken_user_handle()[pri:2, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:25:47 IST" name="Test_02_register_with_already_taken_user_handle" finished-at="2020-11-13T19:25:51 IST" duration-ms="4143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_02_register_with_already_taken_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:25:51 IST" name="getResult" finished-at="2020-11-13T19:25:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_02_register_with_already_taken_user_handle status=SUCCESS method=Register.Test_02_register_with_already_taken_user_handle()[pri:2, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_03_register_with_empty_first_name_field()[pri:3, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:25:51 IST" name="Test_03_register_with_empty_first_name_field" finished-at="2020-11-13T19:25:55 IST" duration-ms="4150" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_03_register_with_empty_first_name_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:25:55 IST" name="getResult" finished-at="2020-11-13T19:25:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_03_register_with_empty_first_name_field status=SUCCESS method=Register.Test_03_register_with_empty_first_name_field()[pri:3, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_04_register_with_empty_last_name_field()[pri:4, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:25:55 IST" name="Test_04_register_with_empty_last_name_field" finished-at="2020-11-13T19:25:59 IST" duration-ms="3769" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_04_register_with_empty_last_name_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:25:59 IST" name="getResult" finished-at="2020-11-13T19:25:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_04_register_with_empty_last_name_field status=SUCCESS method=Register.Test_04_register_with_empty_last_name_field()[pri:4, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_05_register_with_empty_street_address_1_field()[pri:5, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:25:59 IST" name="Test_05_register_with_empty_street_address_1_field" finished-at="2020-11-13T19:26:03 IST" duration-ms="3881" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register.Test_05_register_with_empty_street_address_1_field(Register.java:153)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_05_register_with_empty_street_address_1_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:03 IST" name="getResult" finished-at="2020-11-13T19:26:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_05_register_with_empty_street_address_1_field status=FAILURE method=Register.Test_05_register_with_empty_street_address_1_field()[pri:5, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_06_register_without_street_address_1_entity()[pri:6, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:03 IST" name="Test_06_register_without_street_address_1_entity" finished-at="2020-11-13T19:26:07 IST" duration-ms="3823" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_06_register_without_street_address_1_entity -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:07 IST" name="getResult" finished-at="2020-11-13T19:26:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_06_register_without_street_address_1_entity status=SUCCESS method=Register.Test_06_register_without_street_address_1_entity()[pri:6, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_07_register_With_less_than_3_characters_street_address_1_field()[pri:7, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:07 IST" name="Test_07_register_With_less_than_3_characters_street_address_1_field" finished-at="2020-11-13T19:26:11 IST" duration-ms="4530" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_07_register_With_less_than_3_characters_street_address_1_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:11 IST" name="getResult" finished-at="2020-11-13T19:26:11 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_07_register_With_less_than_3_characters_street_address_1_field status=SUCCESS method=Register.Test_07_register_With_less_than_3_characters_street_address_1_field()[pri:7, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_08_register_With_more_than_40_characters_street_address_1_field()[pri:8, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:11 IST" name="Test_08_register_With_more_than_40_characters_street_address_1_field" finished-at="2020-11-13T19:26:16 IST" duration-ms="4370" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_08_register_With_more_than_40_characters_street_address_1_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:16 IST" name="getResult" finished-at="2020-11-13T19:26:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_08_register_With_more_than_40_characters_street_address_1_field status=SUCCESS method=Register.Test_08_register_With_more_than_40_characters_street_address_1_field()[pri:8, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_09_register_With_minumum_allowed_3_characters_street_address_1_field()[pri:9, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:16 IST" name="Test_09_register_With_minumum_allowed_3_characters_street_address_1_field" finished-at="2020-11-13T19:26:20 IST" duration-ms="3894" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_09_register_With_minumum_allowed_3_characters_street_address_1_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:20 IST" name="getResult" finished-at="2020-11-13T19:26:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_09_register_With_minumum_allowed_3_characters_street_address_1_field status=SUCCESS method=Register.Test_09_register_With_minumum_allowed_3_characters_street_address_1_field()[pri:9, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_10_register_with_maximum_allowed_40_characters_street_address_1_field()[pri:10, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:20 IST" name="Test_10_register_with_maximum_allowed_40_characters_street_address_1_field" finished-at="2020-11-13T19:26:24 IST" duration-ms="3809" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_10_register_with_maximum_allowed_40_characters_street_address_1_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:24 IST" name="getResult" finished-at="2020-11-13T19:26:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_10_register_with_maximum_allowed_40_characters_street_address_1_field status=SUCCESS method=Register.Test_10_register_with_maximum_allowed_40_characters_street_address_1_field()[pri:10, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_11_register_with_empty_street_address_2_field()[pri:11, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:24 IST" name="Test_11_register_with_empty_street_address_2_field" finished-at="2020-11-13T19:26:28 IST" duration-ms="4490" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_11_register_with_empty_street_address_2_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:28 IST" name="getResult" finished-at="2020-11-13T19:26:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_11_register_with_empty_street_address_2_field status=SUCCESS method=Register.Test_11_register_with_empty_street_address_2_field()[pri:11, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_12_register_with_less_than_3_characters_street_address_2_field()[pri:12, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:28 IST" name="Test_12_register_with_less_than_3_characters_street_address_2_field" finished-at="2020-11-13T19:26:32 IST" duration-ms="3792" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_12_register_with_less_than_3_characters_street_address_2_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:32 IST" name="getResult" finished-at="2020-11-13T19:26:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_12_register_with_less_than_3_characters_street_address_2_field status=SUCCESS method=Register.Test_12_register_with_less_than_3_characters_street_address_2_field()[pri:12, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_13_register_With_more_than_40_characters_street_address_2()[pri:13, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:32 IST" name="Test_13_register_With_more_than_40_characters_street_address_2" finished-at="2020-11-13T19:26:36 IST" duration-ms="3837" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_13_register_With_more_than_40_characters_street_address_2 -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:36 IST" name="getResult" finished-at="2020-11-13T19:26:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_13_register_With_more_than_40_characters_street_address_2 status=SUCCESS method=Register.Test_13_register_With_more_than_40_characters_street_address_2()[pri:13, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_14_register_With_Minumum_3_Chars_Street_Address_2()[pri:14, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:36 IST" name="Test_14_register_With_Minumum_3_Chars_Street_Address_2" finished-at="2020-11-13T19:26:40 IST" duration-ms="4159" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_14_register_With_Minumum_3_Chars_Street_Address_2 -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:40 IST" name="getResult" finished-at="2020-11-13T19:26:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_14_register_With_Minumum_3_Chars_Street_Address_2 status=SUCCESS method=Register.Test_14_register_With_Minumum_3_Chars_Street_Address_2()[pri:14, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_15_register_with_maximum_allowed_40_chars_street_address_2()[pri:15, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:40 IST" name="Test_15_register_with_maximum_allowed_40_chars_street_address_2" finished-at="2020-11-13T19:26:44 IST" duration-ms="4137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_15_register_with_maximum_allowed_40_chars_street_address_2 -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:44 IST" name="getResult" finished-at="2020-11-13T19:26:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_15_register_with_maximum_allowed_40_chars_street_address_2 status=SUCCESS method=Register.Test_15_register_with_maximum_allowed_40_chars_street_address_2()[pri:15, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_16_register_with_empty_city_field()[pri:16, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:44 IST" name="Test_16_register_with_empty_city_field" finished-at="2020-11-13T19:26:48 IST" duration-ms="4057" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register.Test_16_register_with_empty_city_field(Register.java:399)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_16_register_with_empty_city_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:48 IST" name="getResult" finished-at="2020-11-13T19:26:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_16_register_with_empty_city_field status=FAILURE method=Register.Test_16_register_with_empty_city_field()[pri:16, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_17_register_with_less_than_2_characters_city_name_field()[pri:17, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:48 IST" name="Test_17_register_with_less_than_2_characters_city_name_field" finished-at="2020-11-13T19:26:52 IST" duration-ms="3617" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_17_register_with_less_than_2_characters_city_name_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:52 IST" name="getResult" finished-at="2020-11-13T19:26:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_17_register_with_less_than_2_characters_city_name_field status=SUCCESS method=Register.Test_17_register_with_less_than_2_characters_city_name_field()[pri:17, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_18_register_with_more_than_40_characters_city_name_field()[pri:18, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:52 IST" name="Test_18_register_with_more_than_40_characters_city_name_field" finished-at="2020-11-13T19:26:56 IST" duration-ms="4152" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_18_register_with_more_than_40_characters_city_name_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:56 IST" name="getResult" finished-at="2020-11-13T19:26:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_18_register_with_more_than_40_characters_city_name_field status=SUCCESS method=Register.Test_18_register_with_more_than_40_characters_city_name_field()[pri:18, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_19_register_with_allowed_40_characters_city_name_field()[pri:19, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:26:56 IST" name="Test_19_register_with_allowed_40_characters_city_name_field" finished-at="2020-11-13T19:27:00 IST" duration-ms="3832" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_19_register_with_allowed_40_characters_city_name_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:00 IST" name="getResult" finished-at="2020-11-13T19:27:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_19_register_with_allowed_40_characters_city_name_field status=SUCCESS method=Register.Test_19_register_with_allowed_40_characters_city_name_field()[pri:19, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_20_register_with_empty_state_field()[pri:20, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:00 IST" name="Test_20_register_with_empty_state_field" finished-at="2020-11-13T19:27:04 IST" duration-ms="4144" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Bad request.] but found [Please choose a different blockchain address to register.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Bad request.] but found [Please choose a different blockchain address to register.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at sila_test_cases.Register.Test_20_register_with_empty_state_field(Register.java:479)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_20_register_with_empty_state_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:04 IST" name="getResult" finished-at="2020-11-13T19:27:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_20_register_with_empty_state_field status=FAILURE method=Register.Test_20_register_with_empty_state_field()[pri:20, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_21_register_with_more_than_2_characters_state_name_field()[pri:21, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:04 IST" name="Test_21_register_with_more_than_2_characters_state_name_field" finished-at="2020-11-13T19:27:07 IST" duration-ms="3511" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_21_register_with_more_than_2_characters_state_name_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:07 IST" name="getResult" finished-at="2020-11-13T19:27:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_21_register_with_more_than_2_characters_state_name_field status=SUCCESS method=Register.Test_21_register_with_more_than_2_characters_state_name_field()[pri:21, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_22_register_with_less_than_2_characters_state_name_field()[pri:22, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:07 IST" name="Test_22_register_with_less_than_2_characters_state_name_field" finished-at="2020-11-13T19:27:11 IST" duration-ms="3831" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_22_register_with_less_than_2_characters_state_name_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:11 IST" name="getResult" finished-at="2020-11-13T19:27:11 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_22_register_with_less_than_2_characters_state_name_field status=SUCCESS method=Register.Test_22_register_with_less_than_2_characters_state_name_field()[pri:22, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_23_register_with_empty_identy_number_field()[pri:23, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:11 IST" name="Test_23_register_with_empty_identy_number_field" finished-at="2020-11-13T19:27:15 IST" duration-ms="3820" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_23_register_with_empty_identy_number_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:15 IST" name="getResult" finished-at="2020-11-13T19:27:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_23_register_with_empty_identy_number_field status=SUCCESS method=Register.Test_23_register_with_empty_identy_number_field()[pri:23, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_24_register_with_empty_phone_field()[pri:24, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:15 IST" name="Test_24_register_with_empty_phone_field" finished-at="2020-11-13T19:27:19 IST" duration-ms="4158" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_24_register_with_empty_phone_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:19 IST" name="getResult" finished-at="2020-11-13T19:27:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_24_register_with_empty_phone_field status=SUCCESS method=Register.Test_24_register_with_empty_phone_field()[pri:24, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_25_register_with_less_than_10_chars_phone_field()[pri:25, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:19 IST" name="Test_25_register_with_less_than_10_chars_phone_field" finished-at="2020-11-13T19:27:23 IST" duration-ms="3836" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_25_register_with_less_than_10_chars_phone_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:23 IST" name="getResult" finished-at="2020-11-13T19:27:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_25_register_with_less_than_10_chars_phone_field status=SUCCESS method=Register.Test_25_register_with_less_than_10_chars_phone_field()[pri:25, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_26_register_with_empty_email_field()[pri:26, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:23 IST" name="Test_26_register_with_empty_email_field" finished-at="2020-11-13T19:27:27 IST" duration-ms="3939" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_26_register_with_empty_email_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:27 IST" name="getResult" finished-at="2020-11-13T19:27:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_26_register_with_empty_email_field status=SUCCESS method=Register.Test_26_register_with_empty_email_field()[pri:26, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_29_register_with_invalid_email_field()[pri:29, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:27 IST" name="Test_29_register_with_invalid_email_field" finished-at="2020-11-13T19:27:31 IST" duration-ms="3728" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_29_register_with_invalid_email_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:31 IST" name="getResult" finished-at="2020-11-13T19:27:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_29_register_with_invalid_email_field status=SUCCESS method=Register.Test_29_register_with_invalid_email_field()[pri:29, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_30_register_with_empty_postal_code_field()[pri:30, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:31 IST" name="Test_30_register_with_empty_postal_code_field" finished-at="2020-11-13T19:27:35 IST" duration-ms="4138" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register.Test_30_register_with_empty_postal_code_field(Register.java:628)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_30_register_with_empty_postal_code_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:35 IST" name="getResult" finished-at="2020-11-13T19:27:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_30_register_with_empty_postal_code_field status=FAILURE method=Register.Test_30_register_with_empty_postal_code_field()[pri:30, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_31_register_with_minimum_1_length_postal_code_field()[pri:31, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:35 IST" name="Test_31_register_with_minimum_1_length_postal_code_field" finished-at="2020-11-13T19:27:38 IST" duration-ms="3518" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register.Test_31_register_with_minimum_1_length_postal_code_field(Register.java:649)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_31_register_with_minimum_1_length_postal_code_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:38 IST" name="getResult" finished-at="2020-11-13T19:27:38 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_31_register_with_minimum_1_length_postal_code_field status=FAILURE method=Register.Test_31_register_with_minimum_1_length_postal_code_field()[pri:31, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_32_register_with_mmaximum_10_length_postal_code_field()[pri:32, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:38 IST" name="Test_32_register_with_mmaximum_10_length_postal_code_field" finished-at="2020-11-13T19:27:43 IST" duration-ms="4141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_32_register_with_mmaximum_10_length_postal_code_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:43 IST" name="getResult" finished-at="2020-11-13T19:27:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_32_register_with_mmaximum_10_length_postal_code_field status=SUCCESS method=Register.Test_32_register_with_mmaximum_10_length_postal_code_field()[pri:32, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_33_register_with_more_than_10_length_postal_code_field()[pri:33, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:43 IST" name="Test_33_register_with_more_than_10_length_postal_code_field" finished-at="2020-11-13T19:27:46 IST" duration-ms="3458" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_33_register_with_more_than_10_length_postal_code_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:46 IST" name="getResult" finished-at="2020-11-13T19:27:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_33_register_with_more_than_10_length_postal_code_field status=SUCCESS method=Register.Test_33_register_with_more_than_10_length_postal_code_field()[pri:33, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_34_register_with_empty_crypto_address_field()[pri:34, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:46 IST" name="Test_34_register_with_empty_crypto_address_field" finished-at="2020-11-13T19:27:50 IST" duration-ms="3578" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_34_register_with_empty_crypto_address_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:50 IST" name="getResult" finished-at="2020-11-13T19:27:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_34_register_with_empty_crypto_address_field status=SUCCESS method=Register.Test_34_register_with_empty_crypto_address_field()[pri:34, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_35_register_with_more_than_42_characters_crypto_address_field()[pri:35, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:50 IST" name="Test_35_register_with_more_than_42_characters_crypto_address_field" finished-at="2020-11-13T19:27:53 IST" duration-ms="3779" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_35_register_with_more_than_42_characters_crypto_address_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:53 IST" name="getResult" finished-at="2020-11-13T19:27:53 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_35_register_with_more_than_42_characters_crypto_address_field status=SUCCESS method=Register.Test_35_register_with_more_than_42_characters_crypto_address_field()[pri:35, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_36_register_with_less_than_42_characters_crypto_address_field()[pri:36, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:53 IST" name="Test_36_register_with_less_than_42_characters_crypto_address_field" finished-at="2020-11-13T19:27:57 IST" duration-ms="3634" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_36_register_with_less_than_42_characters_crypto_address_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:57 IST" name="getResult" finished-at="2020-11-13T19:27:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_36_register_with_less_than_42_characters_crypto_address_field status=SUCCESS method=Register.Test_36_register_with_less_than_42_characters_crypto_address_field()[pri:36, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_38_register_with_Future_birth_date_field()[pri:38, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:27:57 IST" name="Test_38_register_with_Future_birth_date_field" finished-at="2020-11-13T19:28:01 IST" duration-ms="3728" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_38_register_with_Future_birth_date_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:01 IST" name="getResult" finished-at="2020-11-13T19:28:01 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_38_register_with_Future_birth_date_field status=SUCCESS method=Register.Test_38_register_with_Future_birth_date_field()[pri:38, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_39_register_with_below_18_Years_birth_date_field()[pri:39, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:01 IST" name="Test_39_register_with_below_18_Years_birth_date_field" finished-at="2020-11-13T19:28:04 IST" duration-ms="3514" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_39_register_with_below_18_Years_birth_date_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:04 IST" name="getResult" finished-at="2020-11-13T19:28:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_39_register_with_below_18_Years_birth_date_field status=SUCCESS method=Register.Test_39_register_with_below_18_Years_birth_date_field()[pri:39, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_40_register_with_after_18_Years_birth_date_field()[pri:40, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:04 IST" name="Test_40_register_with_after_18_Years_birth_date_field" finished-at="2020-11-13T19:28:08 IST" duration-ms="3862" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register.Test_40_register_with_after_18_Years_birth_date_field(Register.java:828)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_40_register_with_after_18_Years_birth_date_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:08 IST" name="getResult" finished-at="2020-11-13T19:28:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_40_register_with_after_18_Years_birth_date_field status=FAILURE method=Register.Test_40_register_with_after_18_Years_birth_date_field()[pri:40, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_40_register_with_before_18_Years_birth_date_field()[pri:40, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:08 IST" name="Test_40_register_with_before_18_Years_birth_date_field" finished-at="2020-11-13T19:28:12 IST" duration-ms="3926" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_40_register_with_before_18_Years_birth_date_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:12 IST" name="getResult" finished-at="2020-11-13T19:28:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_40_register_with_before_18_Years_birth_date_field status=SUCCESS method=Register.Test_40_register_with_before_18_Years_birth_date_field()[pri:40, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_41_register_With_Empty_User_Handle_Field()[pri:41, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:12 IST" name="Test_41_register_With_Empty_User_Handle_Field" finished-at="2020-11-13T19:28:16 IST" duration-ms="4187" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_41_register_With_Empty_User_Handle_Field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:16 IST" name="getResult" finished-at="2020-11-13T19:28:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_41_register_With_Empty_User_Handle_Field status=SUCCESS method=Register.Test_41_register_With_Empty_User_Handle_Field()[pri:41, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_42_Check_Response_401()[pri:42, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:16 IST" name="Test_42_Check_Response_401" finished-at="2020-11-13T19:28:20 IST" duration-ms="3456" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_42_Check_Response_401 -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:20 IST" name="getResult" finished-at="2020-11-13T19:28:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_42_Check_Response_401 status=SUCCESS method=Register.Test_42_Check_Response_401()[pri:42, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_43_register_with_different_private_key()[pri:43, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:20 IST" name="Test_43_register_with_different_private_key" finished-at="2020-11-13T19:28:24 IST" duration-ms="4174" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_43_register_with_different_private_key -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:24 IST" name="getResult" finished-at="2020-11-13T19:28:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_43_register_with_different_private_key status=SUCCESS method=Register.Test_43_register_with_different_private_key()[pri:43, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_44_register_with_empty_country_field()[pri:44, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:24 IST" name="Test_44_register_with_empty_country_field" finished-at="2020-11-13T19:28:28 IST" duration-ms="4024" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register.Test_44_register_with_empty_country_field(Register.java:937)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_44_register_with_empty_country_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:28 IST" name="getResult" finished-at="2020-11-13T19:28:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_44_register_with_empty_country_field status=FAILURE method=Register.Test_44_register_with_empty_country_field()[pri:44, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_45_register_with_lowercase_country_field()[pri:45, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:28 IST" name="Test_45_register_with_lowercase_country_field" finished-at="2020-11-13T19:28:32 IST" duration-ms="3828" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_45_register_with_lowercase_country_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:32 IST" name="getResult" finished-at="2020-11-13T19:28:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_45_register_with_lowercase_country_field status=SUCCESS method=Register.Test_45_register_with_lowercase_country_field()[pri:45, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_46_register_with_another_country_name()[pri:46, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:32 IST" name="Test_46_register_with_another_country_name" finished-at="2020-11-13T19:28:36 IST" duration-ms="3829" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_46_register_with_another_country_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:36 IST" name="getResult" finished-at="2020-11-13T19:28:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_46_register_with_another_country_name status=SUCCESS method=Register.Test_46_register_with_another_country_name()[pri:46, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_047_register_with_less_than_2_characters_country_name()[pri:47, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:36 IST" name="test_047_register_with_less_than_2_characters_country_name" finished-at="2020-11-13T19:28:39 IST" duration-ms="3520" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_047_register_with_less_than_2_characters_country_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:39 IST" name="getResult" finished-at="2020-11-13T19:28:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_047_register_with_less_than_2_characters_country_name status=SUCCESS method=Register.test_047_register_with_less_than_2_characters_country_name()[pri:47, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_048_register_with_more_than_2_characters_country_name()[pri:48, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:39 IST" name="test_048_register_with_more_than_2_characters_country_name" finished-at="2020-11-13T19:28:43 IST" duration-ms="3827" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_048_register_with_more_than_2_characters_country_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:43 IST" name="getResult" finished-at="2020-11-13T19:28:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_048_register_with_more_than_2_characters_country_name status=SUCCESS method=Register.test_048_register_with_more_than_2_characters_country_name()[pri:48, instance:sila_test_cases.Register@5942ee04] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="CloseClass()[pri:0, instance:sila_test_cases.Register@5942ee04]" started-at="2020-11-13T19:28:43 IST" name="CloseClass" finished-at="2020-11-13T19:28:43 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CloseClass -->
      </class> <!-- sila_test_cases.Register -->
      <class name="sila_test_cases.Link_account">
        <test-method is-config="true" signature="StartClass()[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:20 IST" name="StartClass" finished-at="2020-11-13T19:31:20 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StartClass -->
        <test-method signature="Test_01_Link_account_with_all_valid_data()[pri:1, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:20 IST" name="Test_01_Link_account_with_all_valid_data" finished-at="2020-11-13T19:31:24 IST" duration-ms="4122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_01_Link_account_with_all_valid_data -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:24 IST" name="getResult" finished-at="2020-11-13T19:31:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_01_Link_account_with_all_valid_data status=SUCCESS method=Link_account.Test_01_Link_account_with_all_valid_data()[pri:1, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_02_Link_account_with_empty_user_handle()[pri:2, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:24 IST" name="Test_02_Link_account_with_empty_user_handle" finished-at="2020-11-13T19:31:24 IST" duration-ms="420" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_02_Link_account_with_empty_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:24 IST" name="getResult" finished-at="2020-11-13T19:31:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_02_Link_account_with_empty_user_handle status=SUCCESS method=Link_account.Test_02_Link_account_with_empty_user_handle()[pri:2, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_03_Link_account_with_unregistered_user_handle()[pri:3, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:24 IST" name="Test_03_Link_account_with_unregistered_user_handle" finished-at="2020-11-13T19:31:25 IST" duration-ms="522" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_03_Link_account_with_unregistered_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:25 IST" name="getResult" finished-at="2020-11-13T19:31:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_03_Link_account_with_unregistered_user_handle status=SUCCESS method=Link_account.Test_03_Link_account_with_unregistered_user_handle()[pri:3, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_04_Link_account_with_empty_Public_Token()[pri:4, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:25 IST" name="Test_04_Link_account_with_empty_Public_Token" finished-at="2020-11-13T19:31:25 IST" duration-ms="398" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_04_Link_account_with_empty_Public_Token -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:25 IST" name="getResult" finished-at="2020-11-13T19:31:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_04_Link_account_with_empty_Public_Token status=SUCCESS method=Link_account.Test_04_Link_account_with_empty_Public_Token()[pri:4, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_05_Link_account_with_empty_account_name()[pri:5, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:25 IST" name="Test_05_Link_account_with_empty_account_name" finished-at="2020-11-13T19:31:26 IST" duration-ms="394" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Link_account.Test_05_Link_account_with_empty_account_name(Link_account.java:87)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_05_Link_account_with_empty_account_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:26 IST" name="getResult" finished-at="2020-11-13T19:31:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_05_Link_account_with_empty_account_name status=FAILURE method=Link_account.Test_05_Link_account_with_empty_account_name()[pri:5, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_06_Link_account_with_1_char_account_name()[pri:6, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:26 IST" name="Test_06_Link_account_with_1_char_account_name" finished-at="2020-11-13T19:31:27 IST" duration-ms="1394" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_06_Link_account_with_1_char_account_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:27 IST" name="getResult" finished-at="2020-11-13T19:31:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_06_Link_account_with_1_char_account_name status=SUCCESS method=Link_account.Test_06_Link_account_with_1_char_account_name()[pri:6, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_07_Link_account_with_41_chars_account_name()[pri:7, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:27 IST" name="Test_07_Link_account_with_41_chars_account_name" finished-at="2020-11-13T19:31:27 IST" duration-ms="405" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_07_Link_account_with_41_chars_account_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:27 IST" name="getResult" finished-at="2020-11-13T19:31:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_07_Link_account_with_41_chars_account_name status=SUCCESS method=Link_account.Test_07_Link_account_with_41_chars_account_name()[pri:7, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_08_Link_account_with_40_chars_account_name()[pri:8, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:27 IST" name="Test_08_Link_account_with_40_chars_account_name" finished-at="2020-11-13T19:31:29 IST" duration-ms="1326" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_08_Link_account_with_40_chars_account_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:29 IST" name="getResult" finished-at="2020-11-13T19:31:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_08_Link_account_with_40_chars_account_name status=SUCCESS method=Link_account.Test_08_Link_account_with_40_chars_account_name()[pri:8, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_09_Link_account_with_invalid_signature()[pri:9, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:29 IST" name="Test_09_Link_account_with_invalid_signature" finished-at="2020-11-13T19:31:29 IST" duration-ms="428" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_09_Link_account_with_invalid_signature -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:29 IST" name="getResult" finished-at="2020-11-13T19:31:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_09_Link_account_with_invalid_signature status=SUCCESS method=Link_account.Test_09_Link_account_with_invalid_signature()[pri:9, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_10_Link_account_with_invalid_Public_Token()[pri:10, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:29 IST" name="Test_10_Link_account_with_invalid_Public_Token" finished-at="2020-11-13T19:31:30 IST" duration-ms="1071" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_10_Link_account_with_invalid_Public_Token -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:30 IST" name="getResult" finished-at="2020-11-13T19:31:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_10_Link_account_with_invalid_Public_Token status=SUCCESS method=Link_account.Test_10_Link_account_with_invalid_Public_Token()[pri:10, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_11_Link_account_with_direct_link_account_success()[pri:11, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:30 IST" name="Test_11_Link_account_with_direct_link_account_success" finished-at="2020-11-13T19:31:31 IST" duration-ms="636" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_11_Link_account_with_direct_link_account_success -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:31 IST" name="getResult" finished-at="2020-11-13T19:31:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_11_Link_account_with_direct_link_account_success status=SUCCESS method=Link_account.Test_11_Link_account_with_direct_link_account_success()[pri:11, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_12_Link_direct_link_account_with_empty_user_handle()[pri:12, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:31 IST" name="Test_12_Link_direct_link_account_with_empty_user_handle" finished-at="2020-11-13T19:31:32 IST" duration-ms="643" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_12_Link_direct_link_account_with_empty_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:32 IST" name="getResult" finished-at="2020-11-13T19:31:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_12_Link_direct_link_account_with_empty_user_handle status=SUCCESS method=Link_account.Test_12_Link_direct_link_account_with_empty_user_handle()[pri:12, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_13_Link_direct_link_account_with_unregistered_user_handle()[pri:13, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:32 IST" name="Test_13_Link_direct_link_account_with_unregistered_user_handle" finished-at="2020-11-13T19:31:32 IST" duration-ms="610" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_13_Link_direct_link_account_with_unregistered_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:32 IST" name="getResult" finished-at="2020-11-13T19:31:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_13_Link_direct_link_account_with_unregistered_user_handle status=SUCCESS method=Link_account.Test_13_Link_direct_link_account_with_unregistered_user_handle()[pri:13, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_empty_account_name()[pri:14, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:32 IST" name="link_direct_link_account_with_empty_account_name" finished-at="2020-11-13T19:31:33 IST" duration-ms="408" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Link_account.link_direct_link_account_with_empty_account_name(Link_account.java:223)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_empty_account_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:33 IST" name="getResult" finished-at="2020-11-13T19:31:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_empty_account_name status=FAILURE method=Link_account.link_direct_link_account_with_empty_account_name()[pri:14, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_40Characters_account_name()[pri:15, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:33 IST" name="link_direct_link_account_with_40Characters_account_name" finished-at="2020-11-13T19:31:34 IST" duration-ms="843" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_40Characters_account_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:34 IST" name="getResult" finished-at="2020-11-13T19:31:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_40Characters_account_name status=SUCCESS method=Link_account.link_direct_link_account_with_40Characters_account_name()[pri:15, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_41Characters_account_name()[pri:16, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:34 IST" name="link_direct_link_account_with_41Characters_account_name" finished-at="2020-11-13T19:31:34 IST" duration-ms="382" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_41Characters_account_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:34 IST" name="getResult" finished-at="2020-11-13T19:31:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_41Characters_account_name status=SUCCESS method=Link_account.link_direct_link_account_with_41Characters_account_name()[pri:16, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_empty_account_number()[pri:17, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:34 IST" name="link_direct_link_account_with_empty_account_number" finished-at="2020-11-13T19:31:34 IST" duration-ms="419" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_empty_account_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:34 IST" name="getResult" finished-at="2020-11-13T19:31:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_empty_account_number status=SUCCESS method=Link_account.link_direct_link_account_with_empty_account_number()[pri:17, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_1_digit_account_number()[pri:18, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:34 IST" name="link_direct_link_account_with_1_digit_account_number" finished-at="2020-11-13T19:31:35 IST" duration-ms="600" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_1_digit_account_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:35 IST" name="getResult" finished-at="2020-11-13T19:31:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_1_digit_account_number status=SUCCESS method=Link_account.link_direct_link_account_with_1_digit_account_number()[pri:18, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_17_digit_account_number()[pri:19, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:35 IST" name="link_direct_link_account_with_17_digit_account_number" finished-at="2020-11-13T19:31:36 IST" duration-ms="622" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_17_digit_account_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:36 IST" name="getResult" finished-at="2020-11-13T19:31:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_17_digit_account_number status=SUCCESS method=Link_account.link_direct_link_account_with_17_digit_account_number()[pri:19, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_18_digit_account_number()[pri:20, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:36 IST" name="link_direct_link_account_with_18_digit_account_number" finished-at="2020-11-13T19:31:36 IST" duration-ms="414" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_18_digit_account_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:36 IST" name="getResult" finished-at="2020-11-13T19:31:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_18_digit_account_number status=SUCCESS method=Link_account.link_direct_link_account_with_18_digit_account_number()[pri:20, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_invalid_format_account_number()[pri:21, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:36 IST" name="link_direct_link_account_with_invalid_format_account_number" finished-at="2020-11-13T19:31:36 IST" duration-ms="408" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_invalid_format_account_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:36 IST" name="getResult" finished-at="2020-11-13T19:31:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_invalid_format_account_number status=SUCCESS method=Link_account.link_direct_link_account_with_invalid_format_account_number()[pri:21, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_empty_routing_number()[pri:22, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:36 IST" name="link_direct_link_account_with_empty_routing_number" finished-at="2020-11-13T19:31:37 IST" duration-ms="614" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_empty_routing_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:37 IST" name="getResult" finished-at="2020-11-13T19:31:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_empty_routing_number status=SUCCESS method=Link_account.link_direct_link_account_with_empty_routing_number()[pri:22, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_8_digits_routing_number()[pri:23, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:37 IST" name="link_direct_link_account_with_8_digits_routing_number" finished-at="2020-11-13T19:31:38 IST" duration-ms="632" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_8_digits_routing_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:38 IST" name="getResult" finished-at="2020-11-13T19:31:38 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_8_digits_routing_number status=SUCCESS method=Link_account.link_direct_link_account_with_8_digits_routing_number()[pri:23, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_10_digits_routing_number()[pri:24, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:38 IST" name="link_direct_link_account_with_10_digits_routing_number" finished-at="2020-11-13T19:31:38 IST" duration-ms="633" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_10_digits_routing_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:38 IST" name="getResult" finished-at="2020-11-13T19:31:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_10_digits_routing_number status=SUCCESS method=Link_account.link_direct_link_account_with_10_digits_routing_number()[pri:24, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_invalid_format_routing_number()[pri:25, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:38 IST" name="link_direct_link_account_with_invalid_format_routing_number" finished-at="2020-11-13T19:31:39 IST" duration-ms="541" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_invalid_format_routing_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:39 IST" name="getResult" finished-at="2020-11-13T19:31:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_invalid_format_routing_number status=SUCCESS method=Link_account.link_direct_link_account_with_invalid_format_routing_number()[pri:25, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_empty_account_type()[pri:26, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:39 IST" name="link_direct_link_account_with_empty_account_type" finished-at="2020-11-13T19:31:39 IST" duration-ms="429" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Link_account.link_direct_link_account_with_empty_account_type(Link_account.java:385)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_empty_account_type -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:39 IST" name="getResult" finished-at="2020-11-13T19:31:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_empty_account_type status=FAILURE method=Link_account.link_direct_link_account_with_empty_account_type()[pri:26, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_lower_case_account_type()[pri:27, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:39 IST" name="link_direct_link_account_with_lower_case_account_type" finished-at="2020-11-13T19:31:40 IST" duration-ms="603" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_lower_case_account_type -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:40 IST" name="getResult" finished-at="2020-11-13T19:31:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_lower_case_account_type status=SUCCESS method=Link_account.link_direct_link_account_with_lower_case_account_type()[pri:27, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_10_characters_account_type()[pri:28, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:40 IST" name="link_direct_link_account_with_10_characters_account_type" finished-at="2020-11-13T19:31:41 IST" duration-ms="630" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Link_account.link_direct_link_account_with_10_characters_account_type(Link_account.java:411)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_10_characters_account_type -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:41 IST" name="getResult" finished-at="2020-11-13T19:31:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_10_characters_account_type status=FAILURE method=Link_account.link_direct_link_account_with_10_characters_account_type()[pri:28, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="link_direct_link_account_with_11_characters_account_type()[pri:29, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:41 IST" name="link_direct_link_account_with_11_characters_account_type" finished-at="2020-11-13T19:31:41 IST" duration-ms="413" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- link_direct_link_account_with_11_characters_account_type -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:41 IST" name="getResult" finished-at="2020-11-13T19:31:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=link_direct_link_account_with_11_characters_account_type status=SUCCESS method=Link_account.link_direct_link_account_with_11_characters_account_type()[pri:29, instance:sila_test_cases.Link_account@5a865416] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="CloseClass()[pri:0, instance:sila_test_cases.Link_account@5a865416]" started-at="2020-11-13T19:31:41 IST" name="CloseClass" finished-at="2020-11-13T19:31:41 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CloseClass -->
      </class> <!-- sila_test_cases.Link_account -->
      <class name="sila_test_cases.Check_handle">
        <test-method is-config="true" signature="SetUp()[pri:0, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:19 IST" name="SetUp" finished-at="2020-11-13T19:25:19 IST" duration-ms="97" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SetUp -->
        <test-method is-config="true" signature="StartTest()[pri:0, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:19 IST" name="StartTest" finished-at="2020-11-13T19:25:19 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StartTest -->
        <test-method is-config="true" signature="StartClass()[pri:0, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:19 IST" name="StartClass" finished-at="2020-11-13T19:25:19 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StartClass -->
        <test-method signature="Test_01_check_with_available_user_handle()[pri:1, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:19 IST" name="Test_01_check_with_available_user_handle" finished-at="2020-11-13T19:25:21 IST" duration-ms="1940" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_01_check_with_available_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:21 IST" name="getResult" finished-at="2020-11-13T19:25:21 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_01_check_with_available_user_handle status=SUCCESS method=Check_handle.Test_01_check_with_available_user_handle()[pri:1, instance:sila_test_cases.Check_handle@73eb8672] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_02_check_with_already_taken_user_handle()[pri:2, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:21 IST" name="Test_02_check_with_already_taken_user_handle" finished-at="2020-11-13T19:25:22 IST" duration-ms="470" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_02_check_with_already_taken_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:22 IST" name="getResult" finished-at="2020-11-13T19:25:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_02_check_with_already_taken_user_handle status=SUCCESS method=Check_handle.Test_02_check_with_already_taken_user_handle()[pri:2, instance:sila_test_cases.Check_handle@73eb8672] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_03_check_with_empty_user_handle()[pri:3, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:22 IST" name="Test_03_check_with_empty_user_handle" finished-at="2020-11-13T19:25:22 IST" duration-ms="726" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_03_check_with_empty_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:22 IST" name="getResult" finished-at="2020-11-13T19:25:22 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_03_check_with_empty_user_handle status=SUCCESS method=Check_handle.Test_03_check_with_empty_user_handle()[pri:3, instance:sila_test_cases.Check_handle@73eb8672] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_04_check_with_invalid_authSignature()[pri:4, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:22 IST" name="Test_04_check_with_invalid_authSignature" finished-at="2020-11-13T19:25:24 IST" duration-ms="1241" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_04_check_with_invalid_authSignature -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:24 IST" name="getResult" finished-at="2020-11-13T19:25:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_04_check_with_invalid_authSignature status=SUCCESS method=Check_handle.Test_04_check_with_invalid_authSignature()[pri:4, instance:sila_test_cases.Check_handle@73eb8672] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_05_check_with_invalid_handle_pattern()[pri:5, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:24 IST" name="Test_05_check_with_invalid_handle_pattern" finished-at="2020-11-13T19:25:24 IST" duration-ms="429" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_05_check_with_invalid_handle_pattern -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:24 IST" name="getResult" finished-at="2020-11-13T19:25:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_05_check_with_invalid_handle_pattern status=SUCCESS method=Check_handle.Test_05_check_with_invalid_handle_pattern()[pri:5, instance:sila_test_cases.Check_handle@73eb8672] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="Test_06_check_with_invalid_App_handle()[pri:6, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:24 IST" name="Test_06_check_with_invalid_App_handle" finished-at="2020-11-13T19:25:26 IST" duration-ms="1473" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_06_check_with_invalid_App_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:26 IST" name="getResult" finished-at="2020-11-13T19:25:26 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_06_check_with_invalid_App_handle status=SUCCESS method=Check_handle.Test_06_check_with_invalid_App_handle()[pri:6, instance:sila_test_cases.Check_handle@73eb8672] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="CloseClass()[pri:0, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:25:26 IST" name="CloseClass" finished-at="2020-11-13T19:25:26 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CloseClass -->
        <test-method is-config="true" signature="edntest()[pri:0, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:35:37 IST" name="edntest" finished-at="2020-11-13T19:35:37 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- edntest -->
        <test-method is-config="true" signature="TearDown()[pri:0, instance:sila_test_cases.Check_handle@73eb8672]" started-at="2020-11-13T19:35:37 IST" name="TearDown" finished-at="2020-11-13T19:35:37 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TearDown -->
      </class> <!-- sila_test_cases.Check_handle -->
      <class name="sila_test_cases.Register_add_registration_data">
        <test-method signature="test_001_registration_add_email_with_empty_user_handle()[pri:1, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:31:41 IST" name="test_001_registration_add_email_with_empty_user_handle" finished-at="2020-11-13T19:31:50 IST" duration-ms="8652" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_001_registration_add_email_with_empty_user_handle -->
        <test-method is-config="true" signature="StartClass()[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:31:41 IST" name="StartClass" finished-at="2020-11-13T19:31:41 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StartClass -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:31:50 IST" name="getResult" finished-at="2020-11-13T19:31:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_001_registration_add_email_with_empty_user_handle status=SUCCESS method=Register_add_registration_data.test_001_registration_add_email_with_empty_user_handle()[pri:1, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_002_registration_add_empty_email_field()[pri:2, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:31:50 IST" name="test_002_registration_add_empty_email_field" finished-at="2020-11-13T19:31:53 IST" duration-ms="3645" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_002_registration_add_empty_email_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:31:53 IST" name="getResult" finished-at="2020-11-13T19:31:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_002_registration_add_empty_email_field status=SUCCESS method=Register_add_registration_data.test_002_registration_add_empty_email_field()[pri:2, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_003_registration_add_email_with_invalid_private_key()[pri:3, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:31:53 IST" name="test_003_registration_add_email_with_invalid_private_key" finished-at="2020-11-13T19:31:57 IST" duration-ms="3696" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_003_registration_add_email_with_invalid_private_key -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:31:57 IST" name="getResult" finished-at="2020-11-13T19:31:57 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_003_registration_add_email_with_invalid_private_key status=SUCCESS method=Register_add_registration_data.test_003_registration_add_email_with_invalid_private_key()[pri:3, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_004_registration_add_email_with_not_registered_handle()[pri:4, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:31:57 IST" name="test_004_registration_add_email_with_not_registered_handle" finished-at="2020-11-13T19:32:01 IST" duration-ms="3491" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_004_registration_add_email_with_not_registered_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:01 IST" name="getResult" finished-at="2020-11-13T19:32:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_004_registration_add_email_with_not_registered_handle status=SUCCESS method=Register_add_registration_data.test_004_registration_add_email_with_not_registered_handle()[pri:4, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_005_registration_add_invalid_email()[pri:5, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:01 IST" name="test_005_registration_add_invalid_email" finished-at="2020-11-13T19:32:04 IST" duration-ms="3611" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_005_registration_add_invalid_email -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:04 IST" name="getResult" finished-at="2020-11-13T19:32:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_005_registration_add_invalid_email status=SUCCESS method=Register_add_registration_data.test_005_registration_add_invalid_email()[pri:5, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_006_registration_add_email_with_more_than_max_email_length()[pri:6, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:04 IST" name="test_006_registration_add_email_with_more_than_max_email_length" finished-at="2020-11-13T19:32:08 IST" duration-ms="3723" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_add_registration_data.test_006_registration_add_email_with_more_than_max_email_length(Register_add_registration_data.java:134)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_006_registration_add_email_with_more_than_max_email_length -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:08 IST" name="getResult" finished-at="2020-11-13T19:32:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_006_registration_add_email_with_more_than_max_email_length status=FAILURE method=Register_add_registration_data.test_006_registration_add_email_with_more_than_max_email_length()[pri:6, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_007_registration_add_email_successfully_with_254_characters_email()[pri:7, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:08 IST" name="test_007_registration_add_email_successfully_with_254_characters_email" finished-at="2020-11-13T19:32:12 IST" duration-ms="3661" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_007_registration_add_email_successfully_with_254_characters_email -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:12 IST" name="getResult" finished-at="2020-11-13T19:32:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_007_registration_add_email_successfully_with_254_characters_email status=SUCCESS method=Register_add_registration_data.test_007_registration_add_email_successfully_with_254_characters_email()[pri:7, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_008_registration_add_email_with_all_valid_data()[pri:8, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:12 IST" name="test_008_registration_add_email_with_all_valid_data" finished-at="2020-11-13T19:32:15 IST" duration-ms="3709" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_008_registration_add_email_with_all_valid_data -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:15 IST" name="getResult" finished-at="2020-11-13T19:32:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_008_registration_add_email_with_all_valid_data status=SUCCESS method=Register_add_registration_data.test_008_registration_add_email_with_all_valid_data()[pri:8, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_009_registration_add_phone_num_with_empty_phone_field()[pri:9, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:15 IST" name="test_009_registration_add_phone_num_with_empty_phone_field" finished-at="2020-11-13T19:32:19 IST" duration-ms="3658" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_009_registration_add_phone_num_with_empty_phone_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:19 IST" name="getResult" finished-at="2020-11-13T19:32:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_009_registration_add_phone_num_with_empty_phone_field status=SUCCESS method=Register_add_registration_data.test_009_registration_add_phone_num_with_empty_phone_field()[pri:9, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_010_registration_add_invalid_phone_number()[pri:10, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:19 IST" name="test_010_registration_add_invalid_phone_number" finished-at="2020-11-13T19:32:23 IST" duration-ms="3584" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_010_registration_add_invalid_phone_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:23 IST" name="getResult" finished-at="2020-11-13T19:32:23 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_010_registration_add_invalid_phone_number status=SUCCESS method=Register_add_registration_data.test_010_registration_add_invalid_phone_number()[pri:10, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_010_registration_add_less_than_10_digits_phone_number()[pri:11, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:23 IST" name="test_010_registration_add_less_than_10_digits_phone_number" finished-at="2020-11-13T19:32:26 IST" duration-ms="3602" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_010_registration_add_less_than_10_digits_phone_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:26 IST" name="getResult" finished-at="2020-11-13T19:32:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_010_registration_add_less_than_10_digits_phone_number status=SUCCESS method=Register_add_registration_data.test_010_registration_add_less_than_10_digits_phone_number()[pri:11, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_012_registration_add_more_than_11_digits_phone_number()[pri:12, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:26 IST" name="test_012_registration_add_more_than_11_digits_phone_number" finished-at="2020-11-13T19:32:30 IST" duration-ms="3626" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_012_registration_add_more_than_11_digits_phone_number -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:30 IST" name="getResult" finished-at="2020-11-13T19:32:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_012_registration_add_more_than_11_digits_phone_number status=SUCCESS method=Register_add_registration_data.test_012_registration_add_more_than_11_digits_phone_number()[pri:12, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_013_registration_add_10_digits_phone_number_successfully()[pri:13, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:30 IST" name="test_013_registration_add_10_digits_phone_number_successfully" finished-at="2020-11-13T19:32:34 IST" duration-ms="3744" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_013_registration_add_10_digits_phone_number_successfully -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:34 IST" name="getResult" finished-at="2020-11-13T19:32:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_013_registration_add_10_digits_phone_number_successfully status=SUCCESS method=Register_add_registration_data.test_013_registration_add_10_digits_phone_number_successfully()[pri:13, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_014_registration_add_identity_with_empty_identity_field()[pri:14, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:34 IST" name="test_014_registration_add_identity_with_empty_identity_field" finished-at="2020-11-13T19:32:37 IST" duration-ms="3457" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_014_registration_add_identity_with_empty_identity_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:37 IST" name="getResult" finished-at="2020-11-13T19:32:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_014_registration_add_identity_with_empty_identity_field status=SUCCESS method=Register_add_registration_data.test_014_registration_add_identity_with_empty_identity_field()[pri:14, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_015_Registration_add_empty_identity_alias()[pri:15, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:37 IST" name="test_015_Registration_add_empty_identity_alias" finished-at="2020-11-13T19:32:41 IST" duration-ms="3679" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_015_Registration_add_empty_identity_alias -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:41 IST" name="getResult" finished-at="2020-11-13T19:32:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_015_Registration_add_empty_identity_alias status=SUCCESS method=Register_add_registration_data.test_015_Registration_add_empty_identity_alias()[pri:15, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_016_registration_add_empty_identity_value()[pri:16, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:41 IST" name="test_016_registration_add_empty_identity_value" finished-at="2020-11-13T19:32:44 IST" duration-ms="3683" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_016_registration_add_empty_identity_value -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:44 IST" name="getResult" finished-at="2020-11-13T19:32:44 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_016_registration_add_empty_identity_value status=SUCCESS method=Register_add_registration_data.test_016_registration_add_empty_identity_value()[pri:16, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_017_registration_add_invalid_identity_alias()[pri:17, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:44 IST" name="test_017_registration_add_invalid_identity_alias" finished-at="2020-11-13T19:32:48 IST" duration-ms="3714" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_017_registration_add_invalid_identity_alias -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:48 IST" name="getResult" finished-at="2020-11-13T19:32:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_017_registration_add_invalid_identity_alias status=SUCCESS method=Register_add_registration_data.test_017_registration_add_invalid_identity_alias()[pri:17, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_018_registration_add_lowercase_identity_alias_value()[pri:18, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:48 IST" name="test_018_registration_add_lowercase_identity_alias_value" finished-at="2020-11-13T19:32:52 IST" duration-ms="3635" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_018_registration_add_lowercase_identity_alias_value -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:52 IST" name="getResult" finished-at="2020-11-13T19:32:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_018_registration_add_lowercase_identity_alias_value status=SUCCESS method=Register_add_registration_data.test_018_registration_add_lowercase_identity_alias_value()[pri:18, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_019_registration_add_identity_alias_value_as_EIN_to_individual_user()[pri:19, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:52 IST" name="test_019_registration_add_identity_alias_value_as_EIN_to_individual_user" finished-at="2020-11-13T19:32:55 IST" duration-ms="3620" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_019_registration_add_identity_alias_value_as_EIN_to_individual_user -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:55 IST" name="getResult" finished-at="2020-11-13T19:32:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_019_registration_add_identity_alias_value_as_EIN_to_individual_user status=SUCCESS method=Register_add_registration_data.test_019_registration_add_identity_alias_value_as_EIN_to_individual_user()[pri:19, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_020_registration_add_identity_alias_value_as_EIN_to_individual_user()[pri:20, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:55 IST" name="test_020_registration_add_identity_alias_value_as_EIN_to_individual_user" finished-at="2020-11-13T19:32:59 IST" duration-ms="3631" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_020_registration_add_identity_alias_value_as_EIN_to_individual_user -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:59 IST" name="getResult" finished-at="2020-11-13T19:32:59 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_020_registration_add_identity_alias_value_as_EIN_to_individual_user status=SUCCESS method=Register_add_registration_data.test_020_registration_add_identity_alias_value_as_EIN_to_individual_user()[pri:20, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_021_registration_add_individual_user_identity_with_another_user_handle()[pri:21, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:32:59 IST" name="test_021_registration_add_individual_user_identity_with_another_user_handle" finished-at="2020-11-13T19:33:03 IST" duration-ms="3591" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_021_registration_add_individual_user_identity_with_another_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:03 IST" name="getResult" finished-at="2020-11-13T19:33:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_021_registration_add_individual_user_identity_with_another_user_handle status=SUCCESS method=Register_add_registration_data.test_021_registration_add_individual_user_identity_with_another_user_handle()[pri:21, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_022_registration_add_individual_user_identity_with_unregistered_user_handle()[pri:22, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:03 IST" name="test_022_registration_add_individual_user_identity_with_unregistered_user_handle" finished-at="2020-11-13T19:33:06 IST" duration-ms="3509" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_022_registration_add_individual_user_identity_with_unregistered_user_handle -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:06 IST" name="getResult" finished-at="2020-11-13T19:33:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_022_registration_add_individual_user_identity_with_unregistered_user_handle status=SUCCESS method=Register_add_registration_data.test_022_registration_add_individual_user_identity_with_unregistered_user_handle()[pri:22, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_023_registration_add_individual_user_identity_with_invalid_auth_signature()[pri:23, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:06 IST" name="test_023_registration_add_individual_user_identity_with_invalid_auth_signature" finished-at="2020-11-13T19:33:10 IST" duration-ms="4339" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_023_registration_add_individual_user_identity_with_invalid_auth_signature -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:10 IST" name="getResult" finished-at="2020-11-13T19:33:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_023_registration_add_individual_user_identity_with_invalid_auth_signature status=SUCCESS method=Register_add_registration_data.test_023_registration_add_individual_user_identity_with_invalid_auth_signature()[pri:23, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_024_registration_add_individual_user_identity_successfull()[pri:24, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:10 IST" name="test_024_registration_add_individual_user_identity_successfull" finished-at="2020-11-13T19:33:16 IST" duration-ms="5576" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_024_registration_add_individual_user_identity_successfull -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:16 IST" name="getResult" finished-at="2020-11-13T19:33:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_024_registration_add_individual_user_identity_successfull status=SUCCESS method=Register_add_registration_data.test_024_registration_add_individual_user_identity_successfull()[pri:24, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_025_registration_add_identity_alias_value_to_already_assigned_user()[pri:25, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:16 IST" name="test_025_registration_add_identity_alias_value_to_already_assigned_user" finished-at="2020-11-13T19:33:20 IST" duration-ms="3651" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_025_registration_add_identity_alias_value_to_already_assigned_user -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:20 IST" name="getResult" finished-at="2020-11-13T19:33:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_025_registration_add_identity_alias_value_to_already_assigned_user status=SUCCESS method=Register_add_registration_data.test_025_registration_add_identity_alias_value_to_already_assigned_user()[pri:25, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_026_registration_add_address_with_empty_address_alias()[pri:26, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:20 IST" name="test_026_registration_add_address_with_empty_address_alias" finished-at="2020-11-13T19:33:24 IST" duration-ms="4207" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_026_registration_add_address_with_empty_address_alias -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:24 IST" name="getResult" finished-at="2020-11-13T19:33:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_026_registration_add_address_with_empty_address_alias status=SUCCESS method=Register_add_registration_data.test_026_registration_add_address_with_empty_address_alias()[pri:26, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_27_registration_add_address_with_empty_street_address_1()[pri:27, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:24 IST" name="test_27_registration_add_address_with_empty_street_address_1" finished-at="2020-11-13T19:33:28 IST" duration-ms="3906" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_add_registration_data.test_27_registration_add_address_with_empty_street_address_1(Register_add_registration_data.java:535)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_27_registration_add_address_with_empty_street_address_1 -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:28 IST" name="getResult" finished-at="2020-11-13T19:33:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_27_registration_add_address_with_empty_street_address_1 status=FAILURE method=Register_add_registration_data.test_27_registration_add_address_with_empty_street_address_1()[pri:27, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_028_registration_add_street_address_1_address_with_less_than_3_characters()[pri:28, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:28 IST" name="test_028_registration_add_street_address_1_address_with_less_than_3_characters" finished-at="2020-11-13T19:33:32 IST" duration-ms="4213" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_028_registration_add_street_address_1_address_with_less_than_3_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:32 IST" name="getResult" finished-at="2020-11-13T19:33:32 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_028_registration_add_street_address_1_address_with_less_than_3_characters status=SUCCESS method=Register_add_registration_data.test_028_registration_add_street_address_1_address_with_less_than_3_characters()[pri:28, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_029_registration_add_street_address_1_address_with_3_characters()[pri:29, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:32 IST" name="test_029_registration_add_street_address_1_address_with_3_characters" finished-at="2020-11-13T19:33:36 IST" duration-ms="4182" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_029_registration_add_street_address_1_address_with_3_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:36 IST" name="getResult" finished-at="2020-11-13T19:33:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_029_registration_add_street_address_1_address_with_3_characters status=SUCCESS method=Register_add_registration_data.test_029_registration_add_street_address_1_address_with_3_characters()[pri:29, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_030_registration_add_street_address_1_address_with_40_character()[pri:30, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:36 IST" name="test_030_registration_add_street_address_1_address_with_40_character" finished-at="2020-11-13T19:33:41 IST" duration-ms="4239" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_030_registration_add_street_address_1_address_with_40_character -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:41 IST" name="getResult" finished-at="2020-11-13T19:33:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_030_registration_add_street_address_1_address_with_40_character status=SUCCESS method=Register_add_registration_data.test_030_registration_add_street_address_1_address_with_40_character()[pri:30, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_031_registration_add_street_address_1_address_with_more_than_max_character()[pri:31, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:41 IST" name="test_031_registration_add_street_address_1_address_with_more_than_max_character" finished-at="2020-11-13T19:33:45 IST" duration-ms="4329" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_031_registration_add_street_address_1_address_with_more_than_max_character -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:45 IST" name="getResult" finished-at="2020-11-13T19:33:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_031_registration_add_street_address_1_address_with_more_than_max_character status=SUCCESS method=Register_add_registration_data.test_031_registration_add_street_address_1_address_with_more_than_max_character()[pri:31, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_032_registration_add_empty_street_address_2_address()[pri:32, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:45 IST" name="test_032_registration_add_empty_street_address_2_address" finished-at="2020-11-13T19:33:49 IST" duration-ms="4210" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_032_registration_add_empty_street_address_2_address -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:49 IST" name="getResult" finished-at="2020-11-13T19:33:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_032_registration_add_empty_street_address_2_address status=SUCCESS method=Register_add_registration_data.test_032_registration_add_empty_street_address_2_address()[pri:32, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_033_registration_add_street_address_2_address_with_less_than_3_characters()[pri:33, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:49 IST" name="test_033_registration_add_street_address_2_address_with_less_than_3_characters" finished-at="2020-11-13T19:33:53 IST" duration-ms="4181" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_033_registration_add_street_address_2_address_with_less_than_3_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:53 IST" name="getResult" finished-at="2020-11-13T19:33:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_033_registration_add_street_address_2_address_with_less_than_3_characters status=SUCCESS method=Register_add_registration_data.test_033_registration_add_street_address_2_address_with_less_than_3_characters()[pri:33, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_034_registration_add_street_address_2_address_with_more_than_max_characters()[pri:34, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:53 IST" name="test_034_registration_add_street_address_2_address_with_more_than_max_characters" finished-at="2020-11-13T19:33:58 IST" duration-ms="4363" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_034_registration_add_street_address_2_address_with_more_than_max_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:58 IST" name="getResult" finished-at="2020-11-13T19:33:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_034_registration_add_street_address_2_address_with_more_than_max_characters status=SUCCESS method=Register_add_registration_data.test_034_registration_add_street_address_2_address_with_more_than_max_characters()[pri:34, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_035_registration_add_street_address_2_address_with_40_characters()[pri:35, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:33:58 IST" name="test_035_registration_add_street_address_2_address_with_40_characters" finished-at="2020-11-13T19:34:02 IST" duration-ms="4407" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_035_registration_add_street_address_2_address_with_40_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:02 IST" name="getResult" finished-at="2020-11-13T19:34:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_035_registration_add_street_address_2_address_with_40_characters status=SUCCESS method=Register_add_registration_data.test_035_registration_add_street_address_2_address_with_40_characters()[pri:35, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_036_registration_add_street_address_2_address_with_3_characters()[pri:36, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:02 IST" name="test_036_registration_add_street_address_2_address_with_3_characters" finished-at="2020-11-13T19:34:07 IST" duration-ms="4537" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_036_registration_add_street_address_2_address_with_3_characters -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:07 IST" name="getResult" finished-at="2020-11-13T19:34:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_036_registration_add_street_address_2_address_with_3_characters status=SUCCESS method=Register_add_registration_data.test_036_registration_add_street_address_2_address_with_3_characters()[pri:36, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_037_registration_add_address_with_empty_city()[pri:37, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:07 IST" name="test_037_registration_add_address_with_empty_city" finished-at="2020-11-13T19:34:10 IST" duration-ms="3660" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_add_registration_data.test_037_registration_add_address_with_empty_city(Register_add_registration_data.java:802)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_037_registration_add_address_with_empty_city -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:10 IST" name="getResult" finished-at="2020-11-13T19:34:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_037_registration_add_address_with_empty_city status=FAILURE method=Register_add_registration_data.test_037_registration_add_address_with_empty_city()[pri:37, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_038_registration_add_address_with_less_than_2_characters_city_name()[pri:38, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:10 IST" name="test_038_registration_add_address_with_less_than_2_characters_city_name" finished-at="2020-11-13T19:34:15 IST" duration-ms="4310" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_038_registration_add_address_with_less_than_2_characters_city_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:15 IST" name="getResult" finished-at="2020-11-13T19:34:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_038_registration_add_address_with_less_than_2_characters_city_name status=SUCCESS method=Register_add_registration_data.test_038_registration_add_address_with_less_than_2_characters_city_name()[pri:38, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_039_registration_add_address_with_more_than_40_characters_city_name()[pri:39, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:15 IST" name="test_039_registration_add_address_with_more_than_40_characters_city_name" finished-at="2020-11-13T19:34:19 IST" duration-ms="4468" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_039_registration_add_address_with_more_than_40_characters_city_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:19 IST" name="getResult" finished-at="2020-11-13T19:34:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_039_registration_add_address_with_more_than_40_characters_city_name status=SUCCESS method=Register_add_registration_data.test_039_registration_add_address_with_more_than_40_characters_city_name()[pri:39, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_040_registration_add_address_with_40_characters_city_name()[pri:40, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:19 IST" name="test_040_registration_add_address_with_40_characters_city_name" finished-at="2020-11-13T19:34:23 IST" duration-ms="4210" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_040_registration_add_address_with_40_characters_city_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:23 IST" name="getResult" finished-at="2020-11-13T19:34:23 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_040_registration_add_address_with_40_characters_city_name status=SUCCESS method=Register_add_registration_data.test_040_registration_add_address_with_40_characters_city_name()[pri:40, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_041_registration_add_address_with_empty_state()[pri:41, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:23 IST" name="test_041_registration_add_address_with_empty_state" finished-at="2020-11-13T19:34:24 IST" duration-ms="771" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_add_registration_data.test_041_registration_add_address_with_empty_state(Register_add_registration_data.java:894)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_041_registration_add_address_with_empty_state -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:24 IST" name="getResult" finished-at="2020-11-13T19:34:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_041_registration_add_address_with_empty_state status=FAILURE method=Register_add_registration_data.test_041_registration_add_address_with_empty_state()[pri:41, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_042_registration_add_adress_with_less_than_2_chars_state_field()[pri:42, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:24 IST" name="test_042_registration_add_adress_with_less_than_2_chars_state_field" finished-at="2020-11-13T19:34:25 IST" duration-ms="1272" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_042_registration_add_adress_with_less_than_2_chars_state_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:25 IST" name="getResult" finished-at="2020-11-13T19:34:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_042_registration_add_adress_with_less_than_2_chars_state_field status=SUCCESS method=Register_add_registration_data.test_042_registration_add_adress_with_less_than_2_chars_state_field()[pri:42, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_043_registration_add_adress_with_more_than_2_chars_state_field()[pri:43, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:25 IST" name="test_043_registration_add_adress_with_more_than_2_chars_state_field" finished-at="2020-11-13T19:34:27 IST" duration-ms="1275" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_043_registration_add_adress_with_more_than_2_chars_state_field -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:27 IST" name="getResult" finished-at="2020-11-13T19:34:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_043_registration_add_adress_with_more_than_2_chars_state_field status=SUCCESS method=Register_add_registration_data.test_043_registration_add_adress_with_more_than_2_chars_state_field()[pri:43, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_044_registration_add_address_with_invalid_abbreviations_for_US_states()[pri:44, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:27 IST" name="test_044_registration_add_address_with_invalid_abbreviations_for_US_states" finished-at="2020-11-13T19:34:27 IST" duration-ms="569" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_add_registration_data.test_044_registration_add_address_with_invalid_abbreviations_for_US_states(Register_add_registration_data.java:954)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_044_registration_add_address_with_invalid_abbreviations_for_US_states -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:27 IST" name="getResult" finished-at="2020-11-13T19:34:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_044_registration_add_address_with_invalid_abbreviations_for_US_states status=FAILURE method=Register_add_registration_data.test_044_registration_add_address_with_invalid_abbreviations_for_US_states()[pri:44, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_045_registration_add_address_with_empty_postal_code()[pri:45, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:27 IST" name="test_045_registration_add_address_with_empty_postal_code" finished-at="2020-11-13T19:34:28 IST" duration-ms="590" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_add_registration_data.test_045_registration_add_address_with_empty_postal_code(Register_add_registration_data.java:973)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_045_registration_add_address_with_empty_postal_code -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:28 IST" name="getResult" finished-at="2020-11-13T19:34:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_045_registration_add_address_with_empty_postal_code status=FAILURE method=Register_add_registration_data.test_045_registration_add_address_with_empty_postal_code()[pri:45, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_046_registration_add_address_with_more_than_max_length_postal_code()[pri:46, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:28 IST" name="test_046_registration_add_address_with_more_than_max_length_postal_code" finished-at="2020-11-13T19:34:29 IST" duration-ms="1122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_046_registration_add_address_with_more_than_max_length_postal_code -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:29 IST" name="getResult" finished-at="2020-11-13T19:34:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_046_registration_add_address_with_more_than_max_length_postal_code status=SUCCESS method=Register_add_registration_data.test_046_registration_add_address_with_more_than_max_length_postal_code()[pri:46, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_047_registration_add_address_with_10_digitss_postal_code()[pri:47, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:29 IST" name="test_047_registration_add_address_with_10_digitss_postal_code" finished-at="2020-11-13T19:34:30 IST" duration-ms="558" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_047_registration_add_address_with_10_digitss_postal_code -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:30 IST" name="getResult" finished-at="2020-11-13T19:34:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_047_registration_add_address_with_10_digitss_postal_code status=SUCCESS method=Register_add_registration_data.test_047_registration_add_address_with_10_digitss_postal_code()[pri:47, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_049_registration_add_address_with_empty_country()[pri:49, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:30 IST" name="test_049_registration_add_address_with_empty_country" finished-at="2020-11-13T19:34:30 IST" duration-ms="602" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at sila_test_cases.Register_add_registration_data.test_049_registration_add_address_with_empty_country(Register_add_registration_data.java:1060)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_049_registration_add_address_with_empty_country -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:30 IST" name="getResult" finished-at="2020-11-13T19:34:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_049_registration_add_address_with_empty_country status=FAILURE method=Register_add_registration_data.test_049_registration_add_address_with_empty_country()[pri:49, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_050_registration_add_address_with_another_country_name()[pri:50, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:30 IST" name="test_050_registration_add_address_with_another_country_name" finished-at="2020-11-13T19:34:32 IST" duration-ms="2203" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_050_registration_add_address_with_another_country_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:32 IST" name="getResult" finished-at="2020-11-13T19:34:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_050_registration_add_address_with_another_country_name status=SUCCESS method=Register_add_registration_data.test_050_registration_add_address_with_another_country_name()[pri:50, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_051_registration_add_address_with_less_than_2_characters_country_name()[pri:51, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:32 IST" name="test_051_registration_add_address_with_less_than_2_characters_country_name" finished-at="2020-11-13T19:34:34 IST" duration-ms="1338" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_051_registration_add_address_with_less_than_2_characters_country_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:34 IST" name="getResult" finished-at="2020-11-13T19:34:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_051_registration_add_address_with_less_than_2_characters_country_name status=SUCCESS method=Register_add_registration_data.test_051_registration_add_address_with_less_than_2_characters_country_name()[pri:51, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_052_registration_add_address_with_more_than_2_characters_country_name()[pri:52, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:34 IST" name="test_052_registration_add_address_with_more_than_2_characters_country_name" finished-at="2020-11-13T19:34:35 IST" duration-ms="1178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_052_registration_add_address_with_more_than_2_characters_country_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:35 IST" name="getResult" finished-at="2020-11-13T19:34:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_052_registration_add_address_with_more_than_2_characters_country_name status=SUCCESS method=Register_add_registration_data.test_052_registration_add_address_with_more_than_2_characters_country_name()[pri:52, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_053_registration_add_address_with_lower_case_country_name()[pri:53, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:35 IST" name="test_053_registration_add_address_with_lower_case_country_name" finished-at="2020-11-13T19:34:36 IST" duration-ms="1366" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_053_registration_add_address_with_lower_case_country_name -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:36 IST" name="getResult" finished-at="2020-11-13T19:34:36 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_053_registration_add_address_with_lower_case_country_name status=SUCCESS method=Register_add_registration_data.test_053_registration_add_address_with_lower_case_country_name()[pri:53, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="test_054_registration_add_address_successfully()[pri:54, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:36 IST" name="test_054_registration_add_address_successfully" finished-at="2020-11-13T19:34:38 IST" duration-ms="1273" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_054_registration_add_address_successfully -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:38 IST" name="getResult" finished-at="2020-11-13T19:34:38 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_054_registration_add_address_successfully status=SUCCESS method=Register_add_registration_data.test_054_registration_add_address_successfully()[pri:54, instance:sila_test_cases.Register_add_registration_data@14faa38c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="CloseClass()[pri:0, instance:sila_test_cases.Register_add_registration_data@14faa38c]" started-at="2020-11-13T19:34:38 IST" name="CloseClass" finished-at="2020-11-13T19:34:38 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CloseClass -->
      </class> <!-- sila_test_cases.Register_add_registration_data -->
    </test> <!-- API -->
  </suite> <!-- Silamoney Java SDK  -->
</testng-results>
